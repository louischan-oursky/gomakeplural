// Generated by https://github.com/gotnospirit/makeplural
// at 2020-04-01T16:35:34+08:00
//
// URL: https://github.com/unicode-cldr/cldr-core/raw/master/supplemental/ordinals.json
//
//
// URL: https://github.com/unicode-cldr/cldr-core/raw/master/supplemental/plurals.json
//

package plural

import (
	"fmt"
	"testing"

	"golang.org/x/text/language"
)

func getPluralFunc(t *testing.T, culture language.Tag) func(interface{}, bool) string {
	result, err := GetFunc(culture)
	if nil != err {
		t.Errorf("Unexpected error: %s", err.Error())
		return nil
	}
	return result
}

func testNamedKey(t *testing.T, fn func(interface{}, bool) string, input interface{}, expected, name string, ordinal bool) {
	result := fn(input, ordinal)
	if result != expected {
		t.Errorf("`%s` expecting <%v> but got <%v>", name, expected, result)
	} else if testing.Verbose() {
		fmt.Printf("- Got expected result <%s> for `%v`\n", result, input)
	}
}

func TestPluralFunc_af(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("af"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ak(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ak"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "0.000", `one`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `one`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_am(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("am"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.04", `one`, `fn("0.04", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.6", `other`, `fn("2.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_an(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("an"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ar(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ar"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 3, `few`, `fn(3, false)`, false)
		testNamedKey(t, fn, 10, `few`, `fn(10, false)`, false)
		testNamedKey(t, fn, 103, `few`, `fn(103, false)`, false)
		testNamedKey(t, fn, 110, `few`, `fn(110, false)`, false)
		testNamedKey(t, fn, 1003, `few`, `fn(1003, false)`, false)
		testNamedKey(t, fn, "3.0", `few`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "4.0", `few`, `fn("4.0", false)`, false)
		testNamedKey(t, fn, "5.0", `few`, `fn("5.0", false)`, false)
		testNamedKey(t, fn, "6.0", `few`, `fn("6.0", false)`, false)
		testNamedKey(t, fn, "7.0", `few`, `fn("7.0", false)`, false)
		testNamedKey(t, fn, "8.0", `few`, `fn("8.0", false)`, false)
		testNamedKey(t, fn, "9.0", `few`, `fn("9.0", false)`, false)
		testNamedKey(t, fn, "10.0", `few`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "103.0", `few`, `fn("103.0", false)`, false)
		testNamedKey(t, fn, "1003.0", `few`, `fn("1003.0", false)`, false)
		testNamedKey(t, fn, 11, `many`, `fn(11, false)`, false)
		testNamedKey(t, fn, 26, `many`, `fn(26, false)`, false)
		testNamedKey(t, fn, 111, `many`, `fn(111, false)`, false)
		testNamedKey(t, fn, 1011, `many`, `fn(1011, false)`, false)
		testNamedKey(t, fn, "11.0", `many`, `fn("11.0", false)`, false)
		testNamedKey(t, fn, "12.0", `many`, `fn("12.0", false)`, false)
		testNamedKey(t, fn, "13.0", `many`, `fn("13.0", false)`, false)
		testNamedKey(t, fn, "14.0", `many`, `fn("14.0", false)`, false)
		testNamedKey(t, fn, "15.0", `many`, `fn("15.0", false)`, false)
		testNamedKey(t, fn, "16.0", `many`, `fn("16.0", false)`, false)
		testNamedKey(t, fn, "17.0", `many`, `fn("17.0", false)`, false)
		testNamedKey(t, fn, "18.0", `many`, `fn("18.0", false)`, false)
		testNamedKey(t, fn, "111.0", `many`, `fn("111.0", false)`, false)
		testNamedKey(t, fn, "1011.0", `many`, `fn("1011.0", false)`, false)
		testNamedKey(t, fn, 0, `zero`, `fn(0, false)`, false)
		testNamedKey(t, fn, "0.0", `zero`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.00", `zero`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.000", `zero`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `zero`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 102, `other`, `fn(102, false)`, false)
		testNamedKey(t, fn, 200, `other`, `fn(200, false)`, false)
		testNamedKey(t, fn, 202, `other`, `fn(202, false)`, false)
		testNamedKey(t, fn, 300, `other`, `fn(300, false)`, false)
		testNamedKey(t, fn, 302, `other`, `fn(302, false)`, false)
		testNamedKey(t, fn, 400, `other`, `fn(400, false)`, false)
		testNamedKey(t, fn, 402, `other`, `fn(402, false)`, false)
		testNamedKey(t, fn, 500, `other`, `fn(500, false)`, false)
		testNamedKey(t, fn, 502, `other`, `fn(502, false)`, false)
		testNamedKey(t, fn, 600, `other`, `fn(600, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.1", `other`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ars(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ars"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 3, `few`, `fn(3, false)`, false)
		testNamedKey(t, fn, 10, `few`, `fn(10, false)`, false)
		testNamedKey(t, fn, 103, `few`, `fn(103, false)`, false)
		testNamedKey(t, fn, 110, `few`, `fn(110, false)`, false)
		testNamedKey(t, fn, 1003, `few`, `fn(1003, false)`, false)
		testNamedKey(t, fn, "3.0", `few`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "4.0", `few`, `fn("4.0", false)`, false)
		testNamedKey(t, fn, "5.0", `few`, `fn("5.0", false)`, false)
		testNamedKey(t, fn, "6.0", `few`, `fn("6.0", false)`, false)
		testNamedKey(t, fn, "7.0", `few`, `fn("7.0", false)`, false)
		testNamedKey(t, fn, "8.0", `few`, `fn("8.0", false)`, false)
		testNamedKey(t, fn, "9.0", `few`, `fn("9.0", false)`, false)
		testNamedKey(t, fn, "10.0", `few`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "103.0", `few`, `fn("103.0", false)`, false)
		testNamedKey(t, fn, "1003.0", `few`, `fn("1003.0", false)`, false)
		testNamedKey(t, fn, 11, `many`, `fn(11, false)`, false)
		testNamedKey(t, fn, 26, `many`, `fn(26, false)`, false)
		testNamedKey(t, fn, 111, `many`, `fn(111, false)`, false)
		testNamedKey(t, fn, 1011, `many`, `fn(1011, false)`, false)
		testNamedKey(t, fn, "11.0", `many`, `fn("11.0", false)`, false)
		testNamedKey(t, fn, "12.0", `many`, `fn("12.0", false)`, false)
		testNamedKey(t, fn, "13.0", `many`, `fn("13.0", false)`, false)
		testNamedKey(t, fn, "14.0", `many`, `fn("14.0", false)`, false)
		testNamedKey(t, fn, "15.0", `many`, `fn("15.0", false)`, false)
		testNamedKey(t, fn, "16.0", `many`, `fn("16.0", false)`, false)
		testNamedKey(t, fn, "17.0", `many`, `fn("17.0", false)`, false)
		testNamedKey(t, fn, "18.0", `many`, `fn("18.0", false)`, false)
		testNamedKey(t, fn, "111.0", `many`, `fn("111.0", false)`, false)
		testNamedKey(t, fn, "1011.0", `many`, `fn("1011.0", false)`, false)
		testNamedKey(t, fn, 0, `zero`, `fn(0, false)`, false)
		testNamedKey(t, fn, "0.0", `zero`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.00", `zero`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.000", `zero`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `zero`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 102, `other`, `fn(102, false)`, false)
		testNamedKey(t, fn, 200, `other`, `fn(200, false)`, false)
		testNamedKey(t, fn, 202, `other`, `fn(202, false)`, false)
		testNamedKey(t, fn, 300, `other`, `fn(300, false)`, false)
		testNamedKey(t, fn, 302, `other`, `fn(302, false)`, false)
		testNamedKey(t, fn, 400, `other`, `fn(400, false)`, false)
		testNamedKey(t, fn, 402, `other`, `fn(402, false)`, false)
		testNamedKey(t, fn, 500, `other`, `fn(500, false)`, false)
		testNamedKey(t, fn, 502, `other`, `fn(502, false)`, false)
		testNamedKey(t, fn, 600, `other`, `fn(600, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.1", `other`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_as(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("as"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.04", `one`, `fn("0.04", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.6", `other`, `fn("2.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 5, `one`, `fn(5, true)`, true)
		testNamedKey(t, fn, 7, `one`, `fn(7, true)`, true)
		testNamedKey(t, fn, 10, `one`, `fn(10, true)`, true)
		testNamedKey(t, fn, 2, `two`, `fn(2, true)`, true)
		testNamedKey(t, fn, 3, `two`, `fn(3, true)`, true)
		testNamedKey(t, fn, 4, `few`, `fn(4, true)`, true)
		testNamedKey(t, fn, 6, `many`, `fn(6, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 11, `other`, `fn(11, true)`, true)
		testNamedKey(t, fn, 25, `other`, `fn(25, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_asa(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("asa"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ast(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ast"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_az(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("az"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 2, `one`, `fn(2, true)`, true)
		testNamedKey(t, fn, 5, `one`, `fn(5, true)`, true)
		testNamedKey(t, fn, 7, `one`, `fn(7, true)`, true)
		testNamedKey(t, fn, 8, `one`, `fn(8, true)`, true)
		testNamedKey(t, fn, 11, `one`, `fn(11, true)`, true)
		testNamedKey(t, fn, 12, `one`, `fn(12, true)`, true)
		testNamedKey(t, fn, 15, `one`, `fn(15, true)`, true)
		testNamedKey(t, fn, 17, `one`, `fn(17, true)`, true)
		testNamedKey(t, fn, 18, `one`, `fn(18, true)`, true)
		testNamedKey(t, fn, 20, `one`, `fn(20, true)`, true)
		testNamedKey(t, fn, 22, `one`, `fn(22, true)`, true)
		testNamedKey(t, fn, 25, `one`, `fn(25, true)`, true)
		testNamedKey(t, fn, 101, `one`, `fn(101, true)`, true)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, true)`, true)
		testNamedKey(t, fn, 3, `few`, `fn(3, true)`, true)
		testNamedKey(t, fn, 4, `few`, `fn(4, true)`, true)
		testNamedKey(t, fn, 13, `few`, `fn(13, true)`, true)
		testNamedKey(t, fn, 14, `few`, `fn(14, true)`, true)
		testNamedKey(t, fn, 23, `few`, `fn(23, true)`, true)
		testNamedKey(t, fn, 24, `few`, `fn(24, true)`, true)
		testNamedKey(t, fn, 33, `few`, `fn(33, true)`, true)
		testNamedKey(t, fn, 34, `few`, `fn(34, true)`, true)
		testNamedKey(t, fn, 43, `few`, `fn(43, true)`, true)
		testNamedKey(t, fn, 44, `few`, `fn(44, true)`, true)
		testNamedKey(t, fn, 53, `few`, `fn(53, true)`, true)
		testNamedKey(t, fn, 54, `few`, `fn(54, true)`, true)
		testNamedKey(t, fn, 63, `few`, `fn(63, true)`, true)
		testNamedKey(t, fn, 64, `few`, `fn(64, true)`, true)
		testNamedKey(t, fn, 73, `few`, `fn(73, true)`, true)
		testNamedKey(t, fn, 74, `few`, `fn(74, true)`, true)
		testNamedKey(t, fn, 100, `few`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1003, `few`, `fn(1003, true)`, true)
		testNamedKey(t, fn, 0, `many`, `fn(0, true)`, true)
		testNamedKey(t, fn, 6, `many`, `fn(6, true)`, true)
		testNamedKey(t, fn, 16, `many`, `fn(16, true)`, true)
		testNamedKey(t, fn, 26, `many`, `fn(26, true)`, true)
		testNamedKey(t, fn, 36, `many`, `fn(36, true)`, true)
		testNamedKey(t, fn, 40, `many`, `fn(40, true)`, true)
		testNamedKey(t, fn, 46, `many`, `fn(46, true)`, true)
		testNamedKey(t, fn, 56, `many`, `fn(56, true)`, true)
		testNamedKey(t, fn, 106, `many`, `fn(106, true)`, true)
		testNamedKey(t, fn, 1006, `many`, `fn(1006, true)`, true)
		testNamedKey(t, fn, 9, `other`, `fn(9, true)`, true)
		testNamedKey(t, fn, 10, `other`, `fn(10, true)`, true)
		testNamedKey(t, fn, 19, `other`, `fn(19, true)`, true)
		testNamedKey(t, fn, 29, `other`, `fn(29, true)`, true)
		testNamedKey(t, fn, 30, `other`, `fn(30, true)`, true)
		testNamedKey(t, fn, 39, `other`, `fn(39, true)`, true)
		testNamedKey(t, fn, 49, `other`, `fn(49, true)`, true)
		testNamedKey(t, fn, 59, `other`, `fn(59, true)`, true)
		testNamedKey(t, fn, 69, `other`, `fn(69, true)`, true)
		testNamedKey(t, fn, 79, `other`, `fn(79, true)`, true)
		testNamedKey(t, fn, 109, `other`, `fn(109, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_be(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("be"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "21.0", `one`, `fn("21.0", false)`, false)
		testNamedKey(t, fn, "31.0", `one`, `fn("31.0", false)`, false)
		testNamedKey(t, fn, "41.0", `one`, `fn("41.0", false)`, false)
		testNamedKey(t, fn, "51.0", `one`, `fn("51.0", false)`, false)
		testNamedKey(t, fn, "61.0", `one`, `fn("61.0", false)`, false)
		testNamedKey(t, fn, "71.0", `one`, `fn("71.0", false)`, false)
		testNamedKey(t, fn, "81.0", `one`, `fn("81.0", false)`, false)
		testNamedKey(t, fn, "101.0", `one`, `fn("101.0", false)`, false)
		testNamedKey(t, fn, "1001.0", `one`, `fn("1001.0", false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 22, `few`, `fn(22, false)`, false)
		testNamedKey(t, fn, 24, `few`, `fn(24, false)`, false)
		testNamedKey(t, fn, 32, `few`, `fn(32, false)`, false)
		testNamedKey(t, fn, 34, `few`, `fn(34, false)`, false)
		testNamedKey(t, fn, 42, `few`, `fn(42, false)`, false)
		testNamedKey(t, fn, 44, `few`, `fn(44, false)`, false)
		testNamedKey(t, fn, 52, `few`, `fn(52, false)`, false)
		testNamedKey(t, fn, 54, `few`, `fn(54, false)`, false)
		testNamedKey(t, fn, 62, `few`, `fn(62, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "2.0", `few`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.0", `few`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "4.0", `few`, `fn("4.0", false)`, false)
		testNamedKey(t, fn, "22.0", `few`, `fn("22.0", false)`, false)
		testNamedKey(t, fn, "23.0", `few`, `fn("23.0", false)`, false)
		testNamedKey(t, fn, "24.0", `few`, `fn("24.0", false)`, false)
		testNamedKey(t, fn, "32.0", `few`, `fn("32.0", false)`, false)
		testNamedKey(t, fn, "33.0", `few`, `fn("33.0", false)`, false)
		testNamedKey(t, fn, "102.0", `few`, `fn("102.0", false)`, false)
		testNamedKey(t, fn, "1002.0", `few`, `fn("1002.0", false)`, false)
		testNamedKey(t, fn, 0, `many`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `many`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `many`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `many`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `many`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `many`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `many`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `many`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `many`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "5.0", `many`, `fn("5.0", false)`, false)
		testNamedKey(t, fn, "6.0", `many`, `fn("6.0", false)`, false)
		testNamedKey(t, fn, "7.0", `many`, `fn("7.0", false)`, false)
		testNamedKey(t, fn, "8.0", `many`, `fn("8.0", false)`, false)
		testNamedKey(t, fn, "9.0", `many`, `fn("9.0", false)`, false)
		testNamedKey(t, fn, "10.0", `many`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "11.0", `many`, `fn("11.0", false)`, false)
		testNamedKey(t, fn, "100.0", `many`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `many`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `many`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `many`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `many`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.1", `other`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `other`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `other`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, true)`, true)
		testNamedKey(t, fn, 3, `few`, `fn(3, true)`, true)
		testNamedKey(t, fn, 22, `few`, `fn(22, true)`, true)
		testNamedKey(t, fn, 23, `few`, `fn(23, true)`, true)
		testNamedKey(t, fn, 32, `few`, `fn(32, true)`, true)
		testNamedKey(t, fn, 33, `few`, `fn(33, true)`, true)
		testNamedKey(t, fn, 42, `few`, `fn(42, true)`, true)
		testNamedKey(t, fn, 43, `few`, `fn(43, true)`, true)
		testNamedKey(t, fn, 52, `few`, `fn(52, true)`, true)
		testNamedKey(t, fn, 53, `few`, `fn(53, true)`, true)
		testNamedKey(t, fn, 62, `few`, `fn(62, true)`, true)
		testNamedKey(t, fn, 63, `few`, `fn(63, true)`, true)
		testNamedKey(t, fn, 72, `few`, `fn(72, true)`, true)
		testNamedKey(t, fn, 73, `few`, `fn(73, true)`, true)
		testNamedKey(t, fn, 82, `few`, `fn(82, true)`, true)
		testNamedKey(t, fn, 83, `few`, `fn(83, true)`, true)
		testNamedKey(t, fn, 102, `few`, `fn(102, true)`, true)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 1, `other`, `fn(1, true)`, true)
		testNamedKey(t, fn, 4, `other`, `fn(4, true)`, true)
		testNamedKey(t, fn, 17, `other`, `fn(17, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_bem(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("bem"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_bez(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("bez"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_bg(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("bg"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_bho(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("bho"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "0.000", `one`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `one`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_bm(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("bm"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_bn(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("bn"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.04", `one`, `fn("0.04", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.6", `other`, `fn("2.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 5, `one`, `fn(5, true)`, true)
		testNamedKey(t, fn, 7, `one`, `fn(7, true)`, true)
		testNamedKey(t, fn, 10, `one`, `fn(10, true)`, true)
		testNamedKey(t, fn, 2, `two`, `fn(2, true)`, true)
		testNamedKey(t, fn, 3, `two`, `fn(3, true)`, true)
		testNamedKey(t, fn, 4, `few`, `fn(4, true)`, true)
		testNamedKey(t, fn, 6, `many`, `fn(6, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 11, `other`, `fn(11, true)`, true)
		testNamedKey(t, fn, 25, `other`, `fn(25, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_bo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("bo"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_br(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("br"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "21.0", `one`, `fn("21.0", false)`, false)
		testNamedKey(t, fn, "31.0", `one`, `fn("31.0", false)`, false)
		testNamedKey(t, fn, "41.0", `one`, `fn("41.0", false)`, false)
		testNamedKey(t, fn, "51.0", `one`, `fn("51.0", false)`, false)
		testNamedKey(t, fn, "61.0", `one`, `fn("61.0", false)`, false)
		testNamedKey(t, fn, "81.0", `one`, `fn("81.0", false)`, false)
		testNamedKey(t, fn, "101.0", `one`, `fn("101.0", false)`, false)
		testNamedKey(t, fn, "1001.0", `one`, `fn("1001.0", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, 22, `two`, `fn(22, false)`, false)
		testNamedKey(t, fn, 32, `two`, `fn(32, false)`, false)
		testNamedKey(t, fn, 42, `two`, `fn(42, false)`, false)
		testNamedKey(t, fn, 52, `two`, `fn(52, false)`, false)
		testNamedKey(t, fn, 62, `two`, `fn(62, false)`, false)
		testNamedKey(t, fn, 82, `two`, `fn(82, false)`, false)
		testNamedKey(t, fn, 102, `two`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `two`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "22.0", `two`, `fn("22.0", false)`, false)
		testNamedKey(t, fn, "32.0", `two`, `fn("32.0", false)`, false)
		testNamedKey(t, fn, "42.0", `two`, `fn("42.0", false)`, false)
		testNamedKey(t, fn, "52.0", `two`, `fn("52.0", false)`, false)
		testNamedKey(t, fn, "62.0", `two`, `fn("62.0", false)`, false)
		testNamedKey(t, fn, "82.0", `two`, `fn("82.0", false)`, false)
		testNamedKey(t, fn, "102.0", `two`, `fn("102.0", false)`, false)
		testNamedKey(t, fn, "1002.0", `two`, `fn("1002.0", false)`, false)
		testNamedKey(t, fn, 3, `few`, `fn(3, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 9, `few`, `fn(9, false)`, false)
		testNamedKey(t, fn, 23, `few`, `fn(23, false)`, false)
		testNamedKey(t, fn, 24, `few`, `fn(24, false)`, false)
		testNamedKey(t, fn, 29, `few`, `fn(29, false)`, false)
		testNamedKey(t, fn, 33, `few`, `fn(33, false)`, false)
		testNamedKey(t, fn, 34, `few`, `fn(34, false)`, false)
		testNamedKey(t, fn, 39, `few`, `fn(39, false)`, false)
		testNamedKey(t, fn, 43, `few`, `fn(43, false)`, false)
		testNamedKey(t, fn, 44, `few`, `fn(44, false)`, false)
		testNamedKey(t, fn, 49, `few`, `fn(49, false)`, false)
		testNamedKey(t, fn, 103, `few`, `fn(103, false)`, false)
		testNamedKey(t, fn, 1003, `few`, `fn(1003, false)`, false)
		testNamedKey(t, fn, "3.0", `few`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "4.0", `few`, `fn("4.0", false)`, false)
		testNamedKey(t, fn, "9.0", `few`, `fn("9.0", false)`, false)
		testNamedKey(t, fn, "23.0", `few`, `fn("23.0", false)`, false)
		testNamedKey(t, fn, "24.0", `few`, `fn("24.0", false)`, false)
		testNamedKey(t, fn, "29.0", `few`, `fn("29.0", false)`, false)
		testNamedKey(t, fn, "33.0", `few`, `fn("33.0", false)`, false)
		testNamedKey(t, fn, "34.0", `few`, `fn("34.0", false)`, false)
		testNamedKey(t, fn, "103.0", `few`, `fn("103.0", false)`, false)
		testNamedKey(t, fn, "1003.0", `few`, `fn("1003.0", false)`, false)
		testNamedKey(t, fn, 1000000, `many`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "1000000.0", `many`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, "1000000.00", `many`, `fn("1000000.00", false)`, false)
		testNamedKey(t, fn, "1000000.000", `many`, `fn("1000000.000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `other`, `fn(5, false)`, false)
		testNamedKey(t, fn, 8, `other`, `fn(8, false)`, false)
		testNamedKey(t, fn, 10, `other`, `fn(10, false)`, false)
		testNamedKey(t, fn, 20, `other`, `fn(20, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
	}
}

func TestPluralFunc_brx(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("brx"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_bs(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("bs"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.1", `one`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.1", `one`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "3.1", `one`, `fn("3.1", false)`, false)
		testNamedKey(t, fn, "4.1", `one`, `fn("4.1", false)`, false)
		testNamedKey(t, fn, "5.1", `one`, `fn("5.1", false)`, false)
		testNamedKey(t, fn, "6.1", `one`, `fn("6.1", false)`, false)
		testNamedKey(t, fn, "7.1", `one`, `fn("7.1", false)`, false)
		testNamedKey(t, fn, "10.1", `one`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `one`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `one`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 22, `few`, `fn(22, false)`, false)
		testNamedKey(t, fn, 24, `few`, `fn(24, false)`, false)
		testNamedKey(t, fn, 32, `few`, `fn(32, false)`, false)
		testNamedKey(t, fn, 34, `few`, `fn(34, false)`, false)
		testNamedKey(t, fn, 42, `few`, `fn(42, false)`, false)
		testNamedKey(t, fn, 44, `few`, `fn(44, false)`, false)
		testNamedKey(t, fn, 52, `few`, `fn(52, false)`, false)
		testNamedKey(t, fn, 54, `few`, `fn(54, false)`, false)
		testNamedKey(t, fn, 62, `few`, `fn(62, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "0.2", `few`, `fn("0.2", false)`, false)
		testNamedKey(t, fn, "0.4", `few`, `fn("0.4", false)`, false)
		testNamedKey(t, fn, "1.2", `few`, `fn("1.2", false)`, false)
		testNamedKey(t, fn, "1.4", `few`, `fn("1.4", false)`, false)
		testNamedKey(t, fn, "2.2", `few`, `fn("2.2", false)`, false)
		testNamedKey(t, fn, "2.4", `few`, `fn("2.4", false)`, false)
		testNamedKey(t, fn, "3.2", `few`, `fn("3.2", false)`, false)
		testNamedKey(t, fn, "3.4", `few`, `fn("3.4", false)`, false)
		testNamedKey(t, fn, "4.2", `few`, `fn("4.2", false)`, false)
		testNamedKey(t, fn, "4.4", `few`, `fn("4.4", false)`, false)
		testNamedKey(t, fn, "5.2", `few`, `fn("5.2", false)`, false)
		testNamedKey(t, fn, "10.2", `few`, `fn("10.2", false)`, false)
		testNamedKey(t, fn, "100.2", `few`, `fn("100.2", false)`, false)
		testNamedKey(t, fn, "1000.2", `few`, `fn("1000.2", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `other`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.5", `other`, `fn("0.5", false)`, false)
		testNamedKey(t, fn, "1.0", `other`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.5", `other`, `fn("2.5", false)`, false)
		testNamedKey(t, fn, "2.7", `other`, `fn("2.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ca(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ca"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 3, `one`, `fn(3, true)`, true)
		testNamedKey(t, fn, 2, `two`, `fn(2, true)`, true)
		testNamedKey(t, fn, 4, `few`, `fn(4, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 5, `other`, `fn(5, true)`, true)
		testNamedKey(t, fn, 19, `other`, `fn(19, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ce(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ce"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ceb(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ceb"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 3, `one`, `fn(3, false)`, false)
		testNamedKey(t, fn, 5, `one`, `fn(5, false)`, false)
		testNamedKey(t, fn, 7, `one`, `fn(7, false)`, false)
		testNamedKey(t, fn, 8, `one`, `fn(8, false)`, false)
		testNamedKey(t, fn, 10, `one`, `fn(10, false)`, false)
		testNamedKey(t, fn, 13, `one`, `fn(13, false)`, false)
		testNamedKey(t, fn, 15, `one`, `fn(15, false)`, false)
		testNamedKey(t, fn, 17, `one`, `fn(17, false)`, false)
		testNamedKey(t, fn, 18, `one`, `fn(18, false)`, false)
		testNamedKey(t, fn, 20, `one`, `fn(20, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 100, `one`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `one`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `one`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `one`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `one`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.3", `one`, `fn("0.3", false)`, false)
		testNamedKey(t, fn, "0.5", `one`, `fn("0.5", false)`, false)
		testNamedKey(t, fn, "0.7", `one`, `fn("0.7", false)`, false)
		testNamedKey(t, fn, "0.8", `one`, `fn("0.8", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.3", `one`, `fn("1.3", false)`, false)
		testNamedKey(t, fn, "1.5", `one`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "1.7", `one`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "1.8", `one`, `fn("1.8", false)`, false)
		testNamedKey(t, fn, "2.0", `one`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.1", `one`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "10.0", `one`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `one`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `one`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `one`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `one`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `one`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 4, `other`, `fn(4, false)`, false)
		testNamedKey(t, fn, 6, `other`, `fn(6, false)`, false)
		testNamedKey(t, fn, 9, `other`, `fn(9, false)`, false)
		testNamedKey(t, fn, 14, `other`, `fn(14, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 24, `other`, `fn(24, false)`, false)
		testNamedKey(t, fn, 26, `other`, `fn(26, false)`, false)
		testNamedKey(t, fn, 104, `other`, `fn(104, false)`, false)
		testNamedKey(t, fn, 1004, `other`, `fn(1004, false)`, false)
		testNamedKey(t, fn, "0.4", `other`, `fn("0.4", false)`, false)
		testNamedKey(t, fn, "0.6", `other`, `fn("0.6", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.4", `other`, `fn("1.4", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "1.9", `other`, `fn("1.9", false)`, false)
		testNamedKey(t, fn, "2.4", `other`, `fn("2.4", false)`, false)
		testNamedKey(t, fn, "2.6", `other`, `fn("2.6", false)`, false)
		testNamedKey(t, fn, "10.4", `other`, `fn("10.4", false)`, false)
		testNamedKey(t, fn, "100.4", `other`, `fn("100.4", false)`, false)
		testNamedKey(t, fn, "1000.4", `other`, `fn("1000.4", false)`, false)
	}
}

func TestPluralFunc_cgg(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("cgg"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_chr(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("chr"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ckb(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ckb"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_cs(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("cs"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, "0.0", `many`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `many`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `many`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `many`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `many`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `many`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `many`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `many`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `other`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_cy(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("cy"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 3, `few`, `fn(3, false)`, false)
		testNamedKey(t, fn, "3.0", `few`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "3.00", `few`, `fn("3.00", false)`, false)
		testNamedKey(t, fn, "3.000", `few`, `fn("3.000", false)`, false)
		testNamedKey(t, fn, "3.0000", `few`, `fn("3.0000", false)`, false)
		testNamedKey(t, fn, 6, `many`, `fn(6, false)`, false)
		testNamedKey(t, fn, "6.0", `many`, `fn("6.0", false)`, false)
		testNamedKey(t, fn, "6.00", `many`, `fn("6.00", false)`, false)
		testNamedKey(t, fn, "6.000", `many`, `fn("6.000", false)`, false)
		testNamedKey(t, fn, "6.0000", `many`, `fn("6.0000", false)`, false)
		testNamedKey(t, fn, 0, `zero`, `fn(0, false)`, false)
		testNamedKey(t, fn, "0.0", `zero`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.00", `zero`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.000", `zero`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `zero`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, 4, `other`, `fn(4, false)`, false)
		testNamedKey(t, fn, 5, `other`, `fn(5, false)`, false)
		testNamedKey(t, fn, 7, `other`, `fn(7, false)`, false)
		testNamedKey(t, fn, 20, `other`, `fn(20, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 2, `two`, `fn(2, true)`, true)
		testNamedKey(t, fn, 3, `few`, `fn(3, true)`, true)
		testNamedKey(t, fn, 4, `few`, `fn(4, true)`, true)
		testNamedKey(t, fn, 5, `many`, `fn(5, true)`, true)
		testNamedKey(t, fn, 6, `many`, `fn(6, true)`, true)
		testNamedKey(t, fn, 0, `zero`, `fn(0, true)`, true)
		testNamedKey(t, fn, 7, `zero`, `fn(7, true)`, true)
		testNamedKey(t, fn, 9, `zero`, `fn(9, true)`, true)
		testNamedKey(t, fn, 10, `other`, `fn(10, true)`, true)
		testNamedKey(t, fn, 25, `other`, `fn(25, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_da(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("da"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.6", `one`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.4", `other`, `fn("3.4", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_de(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("de"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_dsb(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("dsb"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 201, `one`, `fn(201, false)`, false)
		testNamedKey(t, fn, 301, `one`, `fn(301, false)`, false)
		testNamedKey(t, fn, 401, `one`, `fn(401, false)`, false)
		testNamedKey(t, fn, 501, `one`, `fn(501, false)`, false)
		testNamedKey(t, fn, 601, `one`, `fn(601, false)`, false)
		testNamedKey(t, fn, 701, `one`, `fn(701, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.1", `one`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.1", `one`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "3.1", `one`, `fn("3.1", false)`, false)
		testNamedKey(t, fn, "4.1", `one`, `fn("4.1", false)`, false)
		testNamedKey(t, fn, "5.1", `one`, `fn("5.1", false)`, false)
		testNamedKey(t, fn, "6.1", `one`, `fn("6.1", false)`, false)
		testNamedKey(t, fn, "7.1", `one`, `fn("7.1", false)`, false)
		testNamedKey(t, fn, "10.1", `one`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `one`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `one`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, 102, `two`, `fn(102, false)`, false)
		testNamedKey(t, fn, 202, `two`, `fn(202, false)`, false)
		testNamedKey(t, fn, 302, `two`, `fn(302, false)`, false)
		testNamedKey(t, fn, 402, `two`, `fn(402, false)`, false)
		testNamedKey(t, fn, 502, `two`, `fn(502, false)`, false)
		testNamedKey(t, fn, 602, `two`, `fn(602, false)`, false)
		testNamedKey(t, fn, 702, `two`, `fn(702, false)`, false)
		testNamedKey(t, fn, 1002, `two`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "0.2", `two`, `fn("0.2", false)`, false)
		testNamedKey(t, fn, "1.2", `two`, `fn("1.2", false)`, false)
		testNamedKey(t, fn, "2.2", `two`, `fn("2.2", false)`, false)
		testNamedKey(t, fn, "3.2", `two`, `fn("3.2", false)`, false)
		testNamedKey(t, fn, "4.2", `two`, `fn("4.2", false)`, false)
		testNamedKey(t, fn, "5.2", `two`, `fn("5.2", false)`, false)
		testNamedKey(t, fn, "6.2", `two`, `fn("6.2", false)`, false)
		testNamedKey(t, fn, "7.2", `two`, `fn("7.2", false)`, false)
		testNamedKey(t, fn, "10.2", `two`, `fn("10.2", false)`, false)
		testNamedKey(t, fn, "100.2", `two`, `fn("100.2", false)`, false)
		testNamedKey(t, fn, "1000.2", `two`, `fn("1000.2", false)`, false)
		testNamedKey(t, fn, 3, `few`, `fn(3, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 103, `few`, `fn(103, false)`, false)
		testNamedKey(t, fn, 104, `few`, `fn(104, false)`, false)
		testNamedKey(t, fn, 203, `few`, `fn(203, false)`, false)
		testNamedKey(t, fn, 204, `few`, `fn(204, false)`, false)
		testNamedKey(t, fn, 303, `few`, `fn(303, false)`, false)
		testNamedKey(t, fn, 304, `few`, `fn(304, false)`, false)
		testNamedKey(t, fn, 403, `few`, `fn(403, false)`, false)
		testNamedKey(t, fn, 404, `few`, `fn(404, false)`, false)
		testNamedKey(t, fn, 503, `few`, `fn(503, false)`, false)
		testNamedKey(t, fn, 504, `few`, `fn(504, false)`, false)
		testNamedKey(t, fn, 603, `few`, `fn(603, false)`, false)
		testNamedKey(t, fn, 604, `few`, `fn(604, false)`, false)
		testNamedKey(t, fn, 703, `few`, `fn(703, false)`, false)
		testNamedKey(t, fn, 704, `few`, `fn(704, false)`, false)
		testNamedKey(t, fn, 1003, `few`, `fn(1003, false)`, false)
		testNamedKey(t, fn, "0.3", `few`, `fn("0.3", false)`, false)
		testNamedKey(t, fn, "0.4", `few`, `fn("0.4", false)`, false)
		testNamedKey(t, fn, "1.3", `few`, `fn("1.3", false)`, false)
		testNamedKey(t, fn, "1.4", `few`, `fn("1.4", false)`, false)
		testNamedKey(t, fn, "2.3", `few`, `fn("2.3", false)`, false)
		testNamedKey(t, fn, "2.4", `few`, `fn("2.4", false)`, false)
		testNamedKey(t, fn, "3.3", `few`, `fn("3.3", false)`, false)
		testNamedKey(t, fn, "3.4", `few`, `fn("3.4", false)`, false)
		testNamedKey(t, fn, "4.3", `few`, `fn("4.3", false)`, false)
		testNamedKey(t, fn, "4.4", `few`, `fn("4.4", false)`, false)
		testNamedKey(t, fn, "5.3", `few`, `fn("5.3", false)`, false)
		testNamedKey(t, fn, "5.4", `few`, `fn("5.4", false)`, false)
		testNamedKey(t, fn, "6.3", `few`, `fn("6.3", false)`, false)
		testNamedKey(t, fn, "6.4", `few`, `fn("6.4", false)`, false)
		testNamedKey(t, fn, "7.3", `few`, `fn("7.3", false)`, false)
		testNamedKey(t, fn, "7.4", `few`, `fn("7.4", false)`, false)
		testNamedKey(t, fn, "10.3", `few`, `fn("10.3", false)`, false)
		testNamedKey(t, fn, "100.3", `few`, `fn("100.3", false)`, false)
		testNamedKey(t, fn, "1000.3", `few`, `fn("1000.3", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `other`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.5", `other`, `fn("0.5", false)`, false)
		testNamedKey(t, fn, "1.0", `other`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.5", `other`, `fn("2.5", false)`, false)
		testNamedKey(t, fn, "2.7", `other`, `fn("2.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_dv(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("dv"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_dz(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("dz"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ee(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ee"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_el(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("el"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_en(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("en"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 21, `one`, `fn(21, true)`, true)
		testNamedKey(t, fn, 31, `one`, `fn(31, true)`, true)
		testNamedKey(t, fn, 41, `one`, `fn(41, true)`, true)
		testNamedKey(t, fn, 51, `one`, `fn(51, true)`, true)
		testNamedKey(t, fn, 61, `one`, `fn(61, true)`, true)
		testNamedKey(t, fn, 71, `one`, `fn(71, true)`, true)
		testNamedKey(t, fn, 81, `one`, `fn(81, true)`, true)
		testNamedKey(t, fn, 101, `one`, `fn(101, true)`, true)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, true)`, true)
		testNamedKey(t, fn, 2, `two`, `fn(2, true)`, true)
		testNamedKey(t, fn, 22, `two`, `fn(22, true)`, true)
		testNamedKey(t, fn, 32, `two`, `fn(32, true)`, true)
		testNamedKey(t, fn, 42, `two`, `fn(42, true)`, true)
		testNamedKey(t, fn, 52, `two`, `fn(52, true)`, true)
		testNamedKey(t, fn, 62, `two`, `fn(62, true)`, true)
		testNamedKey(t, fn, 72, `two`, `fn(72, true)`, true)
		testNamedKey(t, fn, 82, `two`, `fn(82, true)`, true)
		testNamedKey(t, fn, 102, `two`, `fn(102, true)`, true)
		testNamedKey(t, fn, 1002, `two`, `fn(1002, true)`, true)
		testNamedKey(t, fn, 3, `few`, `fn(3, true)`, true)
		testNamedKey(t, fn, 23, `few`, `fn(23, true)`, true)
		testNamedKey(t, fn, 33, `few`, `fn(33, true)`, true)
		testNamedKey(t, fn, 43, `few`, `fn(43, true)`, true)
		testNamedKey(t, fn, 53, `few`, `fn(53, true)`, true)
		testNamedKey(t, fn, 63, `few`, `fn(63, true)`, true)
		testNamedKey(t, fn, 73, `few`, `fn(73, true)`, true)
		testNamedKey(t, fn, 83, `few`, `fn(83, true)`, true)
		testNamedKey(t, fn, 103, `few`, `fn(103, true)`, true)
		testNamedKey(t, fn, 1003, `few`, `fn(1003, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 4, `other`, `fn(4, true)`, true)
		testNamedKey(t, fn, 18, `other`, `fn(18, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_eo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("eo"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_es(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("es"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_et(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("et"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_eu(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("eu"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_fa(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("fa"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.04", `one`, `fn("0.04", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.6", `other`, `fn("2.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ff(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ff"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `one`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.5", `other`, `fn("3.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_fi(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("fi"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_fil(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("fil"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 3, `one`, `fn(3, false)`, false)
		testNamedKey(t, fn, 5, `one`, `fn(5, false)`, false)
		testNamedKey(t, fn, 7, `one`, `fn(7, false)`, false)
		testNamedKey(t, fn, 8, `one`, `fn(8, false)`, false)
		testNamedKey(t, fn, 10, `one`, `fn(10, false)`, false)
		testNamedKey(t, fn, 13, `one`, `fn(13, false)`, false)
		testNamedKey(t, fn, 15, `one`, `fn(15, false)`, false)
		testNamedKey(t, fn, 17, `one`, `fn(17, false)`, false)
		testNamedKey(t, fn, 18, `one`, `fn(18, false)`, false)
		testNamedKey(t, fn, 20, `one`, `fn(20, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 100, `one`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `one`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `one`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `one`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `one`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.3", `one`, `fn("0.3", false)`, false)
		testNamedKey(t, fn, "0.5", `one`, `fn("0.5", false)`, false)
		testNamedKey(t, fn, "0.7", `one`, `fn("0.7", false)`, false)
		testNamedKey(t, fn, "0.8", `one`, `fn("0.8", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.3", `one`, `fn("1.3", false)`, false)
		testNamedKey(t, fn, "1.5", `one`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "1.7", `one`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "1.8", `one`, `fn("1.8", false)`, false)
		testNamedKey(t, fn, "2.0", `one`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.1", `one`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "10.0", `one`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `one`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `one`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `one`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `one`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `one`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 4, `other`, `fn(4, false)`, false)
		testNamedKey(t, fn, 6, `other`, `fn(6, false)`, false)
		testNamedKey(t, fn, 9, `other`, `fn(9, false)`, false)
		testNamedKey(t, fn, 14, `other`, `fn(14, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 24, `other`, `fn(24, false)`, false)
		testNamedKey(t, fn, 26, `other`, `fn(26, false)`, false)
		testNamedKey(t, fn, 104, `other`, `fn(104, false)`, false)
		testNamedKey(t, fn, 1004, `other`, `fn(1004, false)`, false)
		testNamedKey(t, fn, "0.4", `other`, `fn("0.4", false)`, false)
		testNamedKey(t, fn, "0.6", `other`, `fn("0.6", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.4", `other`, `fn("1.4", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "1.9", `other`, `fn("1.9", false)`, false)
		testNamedKey(t, fn, "2.4", `other`, `fn("2.4", false)`, false)
		testNamedKey(t, fn, "2.6", `other`, `fn("2.6", false)`, false)
		testNamedKey(t, fn, "10.4", `other`, `fn("10.4", false)`, false)
		testNamedKey(t, fn, "100.4", `other`, `fn("100.4", false)`, false)
		testNamedKey(t, fn, "1000.4", `other`, `fn("1000.4", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 16, `other`, `fn(16, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_fo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("fo"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_fr(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("fr"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `one`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.5", `other`, `fn("3.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 16, `other`, `fn(16, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_fur(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("fur"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_fy(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("fy"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ga(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ga"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 3, `few`, `fn(3, false)`, false)
		testNamedKey(t, fn, 6, `few`, `fn(6, false)`, false)
		testNamedKey(t, fn, "3.0", `few`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "4.0", `few`, `fn("4.0", false)`, false)
		testNamedKey(t, fn, "5.0", `few`, `fn("5.0", false)`, false)
		testNamedKey(t, fn, "6.0", `few`, `fn("6.0", false)`, false)
		testNamedKey(t, fn, "3.00", `few`, `fn("3.00", false)`, false)
		testNamedKey(t, fn, "4.00", `few`, `fn("4.00", false)`, false)
		testNamedKey(t, fn, "5.00", `few`, `fn("5.00", false)`, false)
		testNamedKey(t, fn, "6.00", `few`, `fn("6.00", false)`, false)
		testNamedKey(t, fn, "3.000", `few`, `fn("3.000", false)`, false)
		testNamedKey(t, fn, "4.000", `few`, `fn("4.000", false)`, false)
		testNamedKey(t, fn, "5.000", `few`, `fn("5.000", false)`, false)
		testNamedKey(t, fn, "6.000", `few`, `fn("6.000", false)`, false)
		testNamedKey(t, fn, "3.0000", `few`, `fn("3.0000", false)`, false)
		testNamedKey(t, fn, "4.0000", `few`, `fn("4.0000", false)`, false)
		testNamedKey(t, fn, "5.0000", `few`, `fn("5.0000", false)`, false)
		testNamedKey(t, fn, "6.0000", `few`, `fn("6.0000", false)`, false)
		testNamedKey(t, fn, 7, `many`, `fn(7, false)`, false)
		testNamedKey(t, fn, 10, `many`, `fn(10, false)`, false)
		testNamedKey(t, fn, "7.0", `many`, `fn("7.0", false)`, false)
		testNamedKey(t, fn, "8.0", `many`, `fn("8.0", false)`, false)
		testNamedKey(t, fn, "9.0", `many`, `fn("9.0", false)`, false)
		testNamedKey(t, fn, "10.0", `many`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "7.00", `many`, `fn("7.00", false)`, false)
		testNamedKey(t, fn, "8.00", `many`, `fn("8.00", false)`, false)
		testNamedKey(t, fn, "9.00", `many`, `fn("9.00", false)`, false)
		testNamedKey(t, fn, "10.00", `many`, `fn("10.00", false)`, false)
		testNamedKey(t, fn, "7.000", `many`, `fn("7.000", false)`, false)
		testNamedKey(t, fn, "8.000", `many`, `fn("8.000", false)`, false)
		testNamedKey(t, fn, "9.000", `many`, `fn("9.000", false)`, false)
		testNamedKey(t, fn, "10.000", `many`, `fn("10.000", false)`, false)
		testNamedKey(t, fn, "7.0000", `many`, `fn("7.0000", false)`, false)
		testNamedKey(t, fn, "8.0000", `many`, `fn("8.0000", false)`, false)
		testNamedKey(t, fn, "9.0000", `many`, `fn("9.0000", false)`, false)
		testNamedKey(t, fn, "10.0000", `many`, `fn("10.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 11, `other`, `fn(11, false)`, false)
		testNamedKey(t, fn, 25, `other`, `fn(25, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.1", `other`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 16, `other`, `fn(16, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_gd(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("gd"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 11, `one`, `fn(11, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "11.0", `one`, `fn("11.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "11.00", `one`, `fn("11.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "11.000", `one`, `fn("11.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, 12, `two`, `fn(12, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "12.0", `two`, `fn("12.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "12.00", `two`, `fn("12.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "12.000", `two`, `fn("12.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 3, `few`, `fn(3, false)`, false)
		testNamedKey(t, fn, 10, `few`, `fn(10, false)`, false)
		testNamedKey(t, fn, 13, `few`, `fn(13, false)`, false)
		testNamedKey(t, fn, 19, `few`, `fn(19, false)`, false)
		testNamedKey(t, fn, "3.0", `few`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "4.0", `few`, `fn("4.0", false)`, false)
		testNamedKey(t, fn, "5.0", `few`, `fn("5.0", false)`, false)
		testNamedKey(t, fn, "6.0", `few`, `fn("6.0", false)`, false)
		testNamedKey(t, fn, "7.0", `few`, `fn("7.0", false)`, false)
		testNamedKey(t, fn, "8.0", `few`, `fn("8.0", false)`, false)
		testNamedKey(t, fn, "9.0", `few`, `fn("9.0", false)`, false)
		testNamedKey(t, fn, "10.0", `few`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "13.0", `few`, `fn("13.0", false)`, false)
		testNamedKey(t, fn, "14.0", `few`, `fn("14.0", false)`, false)
		testNamedKey(t, fn, "15.0", `few`, `fn("15.0", false)`, false)
		testNamedKey(t, fn, "16.0", `few`, `fn("16.0", false)`, false)
		testNamedKey(t, fn, "17.0", `few`, `fn("17.0", false)`, false)
		testNamedKey(t, fn, "18.0", `few`, `fn("18.0", false)`, false)
		testNamedKey(t, fn, "19.0", `few`, `fn("19.0", false)`, false)
		testNamedKey(t, fn, "3.00", `few`, `fn("3.00", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 20, `other`, `fn(20, false)`, false)
		testNamedKey(t, fn, 34, `other`, `fn(34, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.1", `other`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 11, `one`, `fn(11, true)`, true)
		testNamedKey(t, fn, 2, `two`, `fn(2, true)`, true)
		testNamedKey(t, fn, 12, `two`, `fn(12, true)`, true)
		testNamedKey(t, fn, 3, `few`, `fn(3, true)`, true)
		testNamedKey(t, fn, 13, `few`, `fn(13, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 4, `other`, `fn(4, true)`, true)
		testNamedKey(t, fn, 10, `other`, `fn(10, true)`, true)
		testNamedKey(t, fn, 14, `other`, `fn(14, true)`, true)
		testNamedKey(t, fn, 21, `other`, `fn(21, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_gl(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("gl"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_gsw(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("gsw"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_gu(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("gu"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.04", `one`, `fn("0.04", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.6", `other`, `fn("2.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 2, `two`, `fn(2, true)`, true)
		testNamedKey(t, fn, 3, `two`, `fn(3, true)`, true)
		testNamedKey(t, fn, 4, `few`, `fn(4, true)`, true)
		testNamedKey(t, fn, 6, `many`, `fn(6, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 5, `other`, `fn(5, true)`, true)
		testNamedKey(t, fn, 7, `other`, `fn(7, true)`, true)
		testNamedKey(t, fn, 20, `other`, `fn(20, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_guw(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("guw"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "0.000", `one`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `one`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_gv(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("gv"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 11, `one`, `fn(11, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, 12, `two`, `fn(12, false)`, false)
		testNamedKey(t, fn, 22, `two`, `fn(22, false)`, false)
		testNamedKey(t, fn, 32, `two`, `fn(32, false)`, false)
		testNamedKey(t, fn, 42, `two`, `fn(42, false)`, false)
		testNamedKey(t, fn, 52, `two`, `fn(52, false)`, false)
		testNamedKey(t, fn, 62, `two`, `fn(62, false)`, false)
		testNamedKey(t, fn, 72, `two`, `fn(72, false)`, false)
		testNamedKey(t, fn, 102, `two`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `two`, `fn(1002, false)`, false)
		testNamedKey(t, fn, 0, `few`, `fn(0, false)`, false)
		testNamedKey(t, fn, 20, `few`, `fn(20, false)`, false)
		testNamedKey(t, fn, 40, `few`, `fn(40, false)`, false)
		testNamedKey(t, fn, 60, `few`, `fn(60, false)`, false)
		testNamedKey(t, fn, 80, `few`, `fn(80, false)`, false)
		testNamedKey(t, fn, 100, `few`, `fn(100, false)`, false)
		testNamedKey(t, fn, 120, `few`, `fn(120, false)`, false)
		testNamedKey(t, fn, 140, `few`, `fn(140, false)`, false)
		testNamedKey(t, fn, 1000, `few`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `few`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `few`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `few`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `many`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `many`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `many`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `many`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `many`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `many`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `many`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `many`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 3, `other`, `fn(3, false)`, false)
		testNamedKey(t, fn, 10, `other`, `fn(10, false)`, false)
		testNamedKey(t, fn, 13, `other`, `fn(13, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 23, `other`, `fn(23, false)`, false)
		testNamedKey(t, fn, 103, `other`, `fn(103, false)`, false)
		testNamedKey(t, fn, 1003, `other`, `fn(1003, false)`, false)
	}
}

func TestPluralFunc_ha(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ha"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_haw(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("haw"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_he(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("he"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, 20, `many`, `fn(20, false)`, false)
		testNamedKey(t, fn, 30, `many`, `fn(30, false)`, false)
		testNamedKey(t, fn, 40, `many`, `fn(40, false)`, false)
		testNamedKey(t, fn, 50, `many`, `fn(50, false)`, false)
		testNamedKey(t, fn, 60, `many`, `fn(60, false)`, false)
		testNamedKey(t, fn, 70, `many`, `fn(70, false)`, false)
		testNamedKey(t, fn, 80, `many`, `fn(80, false)`, false)
		testNamedKey(t, fn, 90, `many`, `fn(90, false)`, false)
		testNamedKey(t, fn, 100, `many`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `many`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `many`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `many`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `many`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 3, `other`, `fn(3, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 101, `other`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `other`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_hi(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("hi"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.04", `one`, `fn("0.04", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.6", `other`, `fn("2.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 2, `two`, `fn(2, true)`, true)
		testNamedKey(t, fn, 3, `two`, `fn(3, true)`, true)
		testNamedKey(t, fn, 4, `few`, `fn(4, true)`, true)
		testNamedKey(t, fn, 6, `many`, `fn(6, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 5, `other`, `fn(5, true)`, true)
		testNamedKey(t, fn, 7, `other`, `fn(7, true)`, true)
		testNamedKey(t, fn, 20, `other`, `fn(20, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_hr(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("hr"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.1", `one`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.1", `one`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "3.1", `one`, `fn("3.1", false)`, false)
		testNamedKey(t, fn, "4.1", `one`, `fn("4.1", false)`, false)
		testNamedKey(t, fn, "5.1", `one`, `fn("5.1", false)`, false)
		testNamedKey(t, fn, "6.1", `one`, `fn("6.1", false)`, false)
		testNamedKey(t, fn, "7.1", `one`, `fn("7.1", false)`, false)
		testNamedKey(t, fn, "10.1", `one`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `one`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `one`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 22, `few`, `fn(22, false)`, false)
		testNamedKey(t, fn, 24, `few`, `fn(24, false)`, false)
		testNamedKey(t, fn, 32, `few`, `fn(32, false)`, false)
		testNamedKey(t, fn, 34, `few`, `fn(34, false)`, false)
		testNamedKey(t, fn, 42, `few`, `fn(42, false)`, false)
		testNamedKey(t, fn, 44, `few`, `fn(44, false)`, false)
		testNamedKey(t, fn, 52, `few`, `fn(52, false)`, false)
		testNamedKey(t, fn, 54, `few`, `fn(54, false)`, false)
		testNamedKey(t, fn, 62, `few`, `fn(62, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "0.2", `few`, `fn("0.2", false)`, false)
		testNamedKey(t, fn, "0.4", `few`, `fn("0.4", false)`, false)
		testNamedKey(t, fn, "1.2", `few`, `fn("1.2", false)`, false)
		testNamedKey(t, fn, "1.4", `few`, `fn("1.4", false)`, false)
		testNamedKey(t, fn, "2.2", `few`, `fn("2.2", false)`, false)
		testNamedKey(t, fn, "2.4", `few`, `fn("2.4", false)`, false)
		testNamedKey(t, fn, "3.2", `few`, `fn("3.2", false)`, false)
		testNamedKey(t, fn, "3.4", `few`, `fn("3.4", false)`, false)
		testNamedKey(t, fn, "4.2", `few`, `fn("4.2", false)`, false)
		testNamedKey(t, fn, "4.4", `few`, `fn("4.4", false)`, false)
		testNamedKey(t, fn, "5.2", `few`, `fn("5.2", false)`, false)
		testNamedKey(t, fn, "10.2", `few`, `fn("10.2", false)`, false)
		testNamedKey(t, fn, "100.2", `few`, `fn("100.2", false)`, false)
		testNamedKey(t, fn, "1000.2", `few`, `fn("1000.2", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `other`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.5", `other`, `fn("0.5", false)`, false)
		testNamedKey(t, fn, "1.0", `other`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.5", `other`, `fn("2.5", false)`, false)
		testNamedKey(t, fn, "2.7", `other`, `fn("2.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_hsb(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("hsb"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 201, `one`, `fn(201, false)`, false)
		testNamedKey(t, fn, 301, `one`, `fn(301, false)`, false)
		testNamedKey(t, fn, 401, `one`, `fn(401, false)`, false)
		testNamedKey(t, fn, 501, `one`, `fn(501, false)`, false)
		testNamedKey(t, fn, 601, `one`, `fn(601, false)`, false)
		testNamedKey(t, fn, 701, `one`, `fn(701, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.1", `one`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.1", `one`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "3.1", `one`, `fn("3.1", false)`, false)
		testNamedKey(t, fn, "4.1", `one`, `fn("4.1", false)`, false)
		testNamedKey(t, fn, "5.1", `one`, `fn("5.1", false)`, false)
		testNamedKey(t, fn, "6.1", `one`, `fn("6.1", false)`, false)
		testNamedKey(t, fn, "7.1", `one`, `fn("7.1", false)`, false)
		testNamedKey(t, fn, "10.1", `one`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `one`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `one`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, 102, `two`, `fn(102, false)`, false)
		testNamedKey(t, fn, 202, `two`, `fn(202, false)`, false)
		testNamedKey(t, fn, 302, `two`, `fn(302, false)`, false)
		testNamedKey(t, fn, 402, `two`, `fn(402, false)`, false)
		testNamedKey(t, fn, 502, `two`, `fn(502, false)`, false)
		testNamedKey(t, fn, 602, `two`, `fn(602, false)`, false)
		testNamedKey(t, fn, 702, `two`, `fn(702, false)`, false)
		testNamedKey(t, fn, 1002, `two`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "0.2", `two`, `fn("0.2", false)`, false)
		testNamedKey(t, fn, "1.2", `two`, `fn("1.2", false)`, false)
		testNamedKey(t, fn, "2.2", `two`, `fn("2.2", false)`, false)
		testNamedKey(t, fn, "3.2", `two`, `fn("3.2", false)`, false)
		testNamedKey(t, fn, "4.2", `two`, `fn("4.2", false)`, false)
		testNamedKey(t, fn, "5.2", `two`, `fn("5.2", false)`, false)
		testNamedKey(t, fn, "6.2", `two`, `fn("6.2", false)`, false)
		testNamedKey(t, fn, "7.2", `two`, `fn("7.2", false)`, false)
		testNamedKey(t, fn, "10.2", `two`, `fn("10.2", false)`, false)
		testNamedKey(t, fn, "100.2", `two`, `fn("100.2", false)`, false)
		testNamedKey(t, fn, "1000.2", `two`, `fn("1000.2", false)`, false)
		testNamedKey(t, fn, 3, `few`, `fn(3, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 103, `few`, `fn(103, false)`, false)
		testNamedKey(t, fn, 104, `few`, `fn(104, false)`, false)
		testNamedKey(t, fn, 203, `few`, `fn(203, false)`, false)
		testNamedKey(t, fn, 204, `few`, `fn(204, false)`, false)
		testNamedKey(t, fn, 303, `few`, `fn(303, false)`, false)
		testNamedKey(t, fn, 304, `few`, `fn(304, false)`, false)
		testNamedKey(t, fn, 403, `few`, `fn(403, false)`, false)
		testNamedKey(t, fn, 404, `few`, `fn(404, false)`, false)
		testNamedKey(t, fn, 503, `few`, `fn(503, false)`, false)
		testNamedKey(t, fn, 504, `few`, `fn(504, false)`, false)
		testNamedKey(t, fn, 603, `few`, `fn(603, false)`, false)
		testNamedKey(t, fn, 604, `few`, `fn(604, false)`, false)
		testNamedKey(t, fn, 703, `few`, `fn(703, false)`, false)
		testNamedKey(t, fn, 704, `few`, `fn(704, false)`, false)
		testNamedKey(t, fn, 1003, `few`, `fn(1003, false)`, false)
		testNamedKey(t, fn, "0.3", `few`, `fn("0.3", false)`, false)
		testNamedKey(t, fn, "0.4", `few`, `fn("0.4", false)`, false)
		testNamedKey(t, fn, "1.3", `few`, `fn("1.3", false)`, false)
		testNamedKey(t, fn, "1.4", `few`, `fn("1.4", false)`, false)
		testNamedKey(t, fn, "2.3", `few`, `fn("2.3", false)`, false)
		testNamedKey(t, fn, "2.4", `few`, `fn("2.4", false)`, false)
		testNamedKey(t, fn, "3.3", `few`, `fn("3.3", false)`, false)
		testNamedKey(t, fn, "3.4", `few`, `fn("3.4", false)`, false)
		testNamedKey(t, fn, "4.3", `few`, `fn("4.3", false)`, false)
		testNamedKey(t, fn, "4.4", `few`, `fn("4.4", false)`, false)
		testNamedKey(t, fn, "5.3", `few`, `fn("5.3", false)`, false)
		testNamedKey(t, fn, "5.4", `few`, `fn("5.4", false)`, false)
		testNamedKey(t, fn, "6.3", `few`, `fn("6.3", false)`, false)
		testNamedKey(t, fn, "6.4", `few`, `fn("6.4", false)`, false)
		testNamedKey(t, fn, "7.3", `few`, `fn("7.3", false)`, false)
		testNamedKey(t, fn, "7.4", `few`, `fn("7.4", false)`, false)
		testNamedKey(t, fn, "10.3", `few`, `fn("10.3", false)`, false)
		testNamedKey(t, fn, "100.3", `few`, `fn("100.3", false)`, false)
		testNamedKey(t, fn, "1000.3", `few`, `fn("1000.3", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `other`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.5", `other`, `fn("0.5", false)`, false)
		testNamedKey(t, fn, "1.0", `other`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.5", `other`, `fn("2.5", false)`, false)
		testNamedKey(t, fn, "2.7", `other`, `fn("2.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_hu(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("hu"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 5, `one`, `fn(5, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 4, `other`, `fn(4, true)`, true)
		testNamedKey(t, fn, 6, `other`, `fn(6, true)`, true)
		testNamedKey(t, fn, 17, `other`, `fn(17, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_hy(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("hy"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `one`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.5", `other`, `fn("3.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 16, `other`, `fn(16, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ia(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ia"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_id(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("id"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ig(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ig"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ii(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ii"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_io(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("io"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_is(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("is"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.6", `one`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.1", `one`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `one`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `one`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.0", `other`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "4.0", `other`, `fn("4.0", false)`, false)
		testNamedKey(t, fn, "5.0", `other`, `fn("5.0", false)`, false)
		testNamedKey(t, fn, "6.0", `other`, `fn("6.0", false)`, false)
		testNamedKey(t, fn, "7.0", `other`, `fn("7.0", false)`, false)
		testNamedKey(t, fn, "8.0", `other`, `fn("8.0", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_it(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("it"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 8, `many`, `fn(8, true)`, true)
		testNamedKey(t, fn, 11, `many`, `fn(11, true)`, true)
		testNamedKey(t, fn, 80, `many`, `fn(80, true)`, true)
		testNamedKey(t, fn, 800, `many`, `fn(800, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 7, `other`, `fn(7, true)`, true)
		testNamedKey(t, fn, 9, `other`, `fn(9, true)`, true)
		testNamedKey(t, fn, 10, `other`, `fn(10, true)`, true)
		testNamedKey(t, fn, 12, `other`, `fn(12, true)`, true)
		testNamedKey(t, fn, 17, `other`, `fn(17, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_iu(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("iu"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 3, `other`, `fn(3, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ja(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ja"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_jbo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("jbo"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_jgo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("jgo"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_yi(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("yi"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_jmc(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("jmc"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_jv(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("jv"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ka(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ka"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 0, `many`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `many`, `fn(2, true)`, true)
		testNamedKey(t, fn, 16, `many`, `fn(16, true)`, true)
		testNamedKey(t, fn, 102, `many`, `fn(102, true)`, true)
		testNamedKey(t, fn, 1002, `many`, `fn(1002, true)`, true)
		testNamedKey(t, fn, 21, `other`, `fn(21, true)`, true)
		testNamedKey(t, fn, 36, `other`, `fn(36, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_kab(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("kab"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `one`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.5", `other`, `fn("3.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_kaj(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("kaj"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_kcg(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("kcg"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_kde(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("kde"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_kea(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("kea"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_kk(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("kk"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 6, `many`, `fn(6, true)`, true)
		testNamedKey(t, fn, 9, `many`, `fn(9, true)`, true)
		testNamedKey(t, fn, 10, `many`, `fn(10, true)`, true)
		testNamedKey(t, fn, 16, `many`, `fn(16, true)`, true)
		testNamedKey(t, fn, 19, `many`, `fn(19, true)`, true)
		testNamedKey(t, fn, 20, `many`, `fn(20, true)`, true)
		testNamedKey(t, fn, 26, `many`, `fn(26, true)`, true)
		testNamedKey(t, fn, 29, `many`, `fn(29, true)`, true)
		testNamedKey(t, fn, 30, `many`, `fn(30, true)`, true)
		testNamedKey(t, fn, 36, `many`, `fn(36, true)`, true)
		testNamedKey(t, fn, 39, `many`, `fn(39, true)`, true)
		testNamedKey(t, fn, 40, `many`, `fn(40, true)`, true)
		testNamedKey(t, fn, 100, `many`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `many`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `many`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `many`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `many`, `fn(1000000, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 5, `other`, `fn(5, true)`, true)
		testNamedKey(t, fn, 7, `other`, `fn(7, true)`, true)
		testNamedKey(t, fn, 8, `other`, `fn(8, true)`, true)
		testNamedKey(t, fn, 11, `other`, `fn(11, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 17, `other`, `fn(17, true)`, true)
		testNamedKey(t, fn, 18, `other`, `fn(18, true)`, true)
		testNamedKey(t, fn, 21, `other`, `fn(21, true)`, true)
		testNamedKey(t, fn, 101, `other`, `fn(101, true)`, true)
		testNamedKey(t, fn, 1001, `other`, `fn(1001, true)`, true)
	}
}

func TestPluralFunc_kkj(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("kkj"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_kl(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("kl"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_km(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("km"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_kn(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("kn"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.04", `one`, `fn("0.04", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.6", `other`, `fn("2.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ko(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ko"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ks(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ks"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ksb(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ksb"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ksh(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ksh"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `zero`, `fn(0, false)`, false)
		testNamedKey(t, fn, "0.0", `zero`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.00", `zero`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.000", `zero`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `zero`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ku(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ku"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_kw(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("kw"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, 22, `two`, `fn(22, false)`, false)
		testNamedKey(t, fn, 42, `two`, `fn(42, false)`, false)
		testNamedKey(t, fn, 62, `two`, `fn(62, false)`, false)
		testNamedKey(t, fn, 82, `two`, `fn(82, false)`, false)
		testNamedKey(t, fn, 102, `two`, `fn(102, false)`, false)
		testNamedKey(t, fn, 122, `two`, `fn(122, false)`, false)
		testNamedKey(t, fn, 142, `two`, `fn(142, false)`, false)
		testNamedKey(t, fn, 1002, `two`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "22.0", `two`, `fn("22.0", false)`, false)
		testNamedKey(t, fn, "42.0", `two`, `fn("42.0", false)`, false)
		testNamedKey(t, fn, "62.0", `two`, `fn("62.0", false)`, false)
		testNamedKey(t, fn, "82.0", `two`, `fn("82.0", false)`, false)
		testNamedKey(t, fn, "102.0", `two`, `fn("102.0", false)`, false)
		testNamedKey(t, fn, "122.0", `two`, `fn("122.0", false)`, false)
		testNamedKey(t, fn, "142.0", `two`, `fn("142.0", false)`, false)
		testNamedKey(t, fn, "1002.0", `two`, `fn("1002.0", false)`, false)
		testNamedKey(t, fn, 3, `few`, `fn(3, false)`, false)
		testNamedKey(t, fn, 23, `few`, `fn(23, false)`, false)
		testNamedKey(t, fn, 43, `few`, `fn(43, false)`, false)
		testNamedKey(t, fn, 63, `few`, `fn(63, false)`, false)
		testNamedKey(t, fn, 83, `few`, `fn(83, false)`, false)
		testNamedKey(t, fn, 103, `few`, `fn(103, false)`, false)
		testNamedKey(t, fn, 123, `few`, `fn(123, false)`, false)
		testNamedKey(t, fn, 143, `few`, `fn(143, false)`, false)
		testNamedKey(t, fn, 1003, `few`, `fn(1003, false)`, false)
		testNamedKey(t, fn, "3.0", `few`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "23.0", `few`, `fn("23.0", false)`, false)
		testNamedKey(t, fn, "43.0", `few`, `fn("43.0", false)`, false)
		testNamedKey(t, fn, "63.0", `few`, `fn("63.0", false)`, false)
		testNamedKey(t, fn, "83.0", `few`, `fn("83.0", false)`, false)
		testNamedKey(t, fn, "103.0", `few`, `fn("103.0", false)`, false)
		testNamedKey(t, fn, "123.0", `few`, `fn("123.0", false)`, false)
		testNamedKey(t, fn, "143.0", `few`, `fn("143.0", false)`, false)
		testNamedKey(t, fn, "1003.0", `few`, `fn("1003.0", false)`, false)
		testNamedKey(t, fn, 21, `many`, `fn(21, false)`, false)
		testNamedKey(t, fn, 41, `many`, `fn(41, false)`, false)
		testNamedKey(t, fn, 61, `many`, `fn(61, false)`, false)
		testNamedKey(t, fn, 81, `many`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `many`, `fn(101, false)`, false)
		testNamedKey(t, fn, 121, `many`, `fn(121, false)`, false)
		testNamedKey(t, fn, 141, `many`, `fn(141, false)`, false)
		testNamedKey(t, fn, 161, `many`, `fn(161, false)`, false)
		testNamedKey(t, fn, 1001, `many`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "21.0", `many`, `fn("21.0", false)`, false)
		testNamedKey(t, fn, "41.0", `many`, `fn("41.0", false)`, false)
		testNamedKey(t, fn, "61.0", `many`, `fn("61.0", false)`, false)
		testNamedKey(t, fn, "81.0", `many`, `fn("81.0", false)`, false)
		testNamedKey(t, fn, "101.0", `many`, `fn("101.0", false)`, false)
		testNamedKey(t, fn, "121.0", `many`, `fn("121.0", false)`, false)
		testNamedKey(t, fn, "141.0", `many`, `fn("141.0", false)`, false)
		testNamedKey(t, fn, "161.0", `many`, `fn("161.0", false)`, false)
		testNamedKey(t, fn, "1001.0", `many`, `fn("1001.0", false)`, false)
		testNamedKey(t, fn, 0, `zero`, `fn(0, false)`, false)
		testNamedKey(t, fn, "0.0", `zero`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.00", `zero`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.000", `zero`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `zero`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, 4, `other`, `fn(4, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1004, `other`, `fn(1004, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.1", `other`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 4, `one`, `fn(4, true)`, true)
		testNamedKey(t, fn, 21, `one`, `fn(21, true)`, true)
		testNamedKey(t, fn, 24, `one`, `fn(24, true)`, true)
		testNamedKey(t, fn, 41, `one`, `fn(41, true)`, true)
		testNamedKey(t, fn, 44, `one`, `fn(44, true)`, true)
		testNamedKey(t, fn, 61, `one`, `fn(61, true)`, true)
		testNamedKey(t, fn, 64, `one`, `fn(64, true)`, true)
		testNamedKey(t, fn, 101, `one`, `fn(101, true)`, true)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, true)`, true)
		testNamedKey(t, fn, 5, `many`, `fn(5, true)`, true)
		testNamedKey(t, fn, 105, `many`, `fn(105, true)`, true)
		testNamedKey(t, fn, 205, `many`, `fn(205, true)`, true)
		testNamedKey(t, fn, 305, `many`, `fn(305, true)`, true)
		testNamedKey(t, fn, 405, `many`, `fn(405, true)`, true)
		testNamedKey(t, fn, 505, `many`, `fn(505, true)`, true)
		testNamedKey(t, fn, 605, `many`, `fn(605, true)`, true)
		testNamedKey(t, fn, 705, `many`, `fn(705, true)`, true)
		testNamedKey(t, fn, 1005, `many`, `fn(1005, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 6, `other`, `fn(6, true)`, true)
		testNamedKey(t, fn, 20, `other`, `fn(20, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ky(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ky"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_lag(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("lag"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.6", `one`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, 0, `zero`, `fn(0, false)`, false)
		testNamedKey(t, fn, "0.0", `zero`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.00", `zero`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.000", `zero`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `zero`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.5", `other`, `fn("3.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_lb(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("lb"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_lg(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("lg"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_lkt(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("lkt"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ln(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ln"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "0.000", `one`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `one`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_lo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("lo"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 16, `other`, `fn(16, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_lt(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("lt"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "21.0", `one`, `fn("21.0", false)`, false)
		testNamedKey(t, fn, "31.0", `one`, `fn("31.0", false)`, false)
		testNamedKey(t, fn, "41.0", `one`, `fn("41.0", false)`, false)
		testNamedKey(t, fn, "51.0", `one`, `fn("51.0", false)`, false)
		testNamedKey(t, fn, "61.0", `one`, `fn("61.0", false)`, false)
		testNamedKey(t, fn, "71.0", `one`, `fn("71.0", false)`, false)
		testNamedKey(t, fn, "81.0", `one`, `fn("81.0", false)`, false)
		testNamedKey(t, fn, "101.0", `one`, `fn("101.0", false)`, false)
		testNamedKey(t, fn, "1001.0", `one`, `fn("1001.0", false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 9, `few`, `fn(9, false)`, false)
		testNamedKey(t, fn, 22, `few`, `fn(22, false)`, false)
		testNamedKey(t, fn, 29, `few`, `fn(29, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "2.0", `few`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.0", `few`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "4.0", `few`, `fn("4.0", false)`, false)
		testNamedKey(t, fn, "5.0", `few`, `fn("5.0", false)`, false)
		testNamedKey(t, fn, "6.0", `few`, `fn("6.0", false)`, false)
		testNamedKey(t, fn, "7.0", `few`, `fn("7.0", false)`, false)
		testNamedKey(t, fn, "8.0", `few`, `fn("8.0", false)`, false)
		testNamedKey(t, fn, "9.0", `few`, `fn("9.0", false)`, false)
		testNamedKey(t, fn, "22.0", `few`, `fn("22.0", false)`, false)
		testNamedKey(t, fn, "102.0", `few`, `fn("102.0", false)`, false)
		testNamedKey(t, fn, "1002.0", `few`, `fn("1002.0", false)`, false)
		testNamedKey(t, fn, "0.1", `many`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `many`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `many`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `many`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.1", `many`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `many`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `many`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 10, `other`, `fn(10, false)`, false)
		testNamedKey(t, fn, 20, `other`, `fn(20, false)`, false)
		testNamedKey(t, fn, 30, `other`, `fn(30, false)`, false)
		testNamedKey(t, fn, 40, `other`, `fn(40, false)`, false)
		testNamedKey(t, fn, 50, `other`, `fn(50, false)`, false)
		testNamedKey(t, fn, 60, `other`, `fn(60, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "11.0", `other`, `fn("11.0", false)`, false)
		testNamedKey(t, fn, "12.0", `other`, `fn("12.0", false)`, false)
		testNamedKey(t, fn, "13.0", `other`, `fn("13.0", false)`, false)
		testNamedKey(t, fn, "14.0", `other`, `fn("14.0", false)`, false)
		testNamedKey(t, fn, "15.0", `other`, `fn("15.0", false)`, false)
		testNamedKey(t, fn, "16.0", `other`, `fn("16.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_lv(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("lv"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.1", `one`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.1", `one`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "3.1", `one`, `fn("3.1", false)`, false)
		testNamedKey(t, fn, "4.1", `one`, `fn("4.1", false)`, false)
		testNamedKey(t, fn, "5.1", `one`, `fn("5.1", false)`, false)
		testNamedKey(t, fn, "6.1", `one`, `fn("6.1", false)`, false)
		testNamedKey(t, fn, "7.1", `one`, `fn("7.1", false)`, false)
		testNamedKey(t, fn, "10.1", `one`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `one`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `one`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 0, `zero`, `fn(0, false)`, false)
		testNamedKey(t, fn, 10, `zero`, `fn(10, false)`, false)
		testNamedKey(t, fn, 20, `zero`, `fn(20, false)`, false)
		testNamedKey(t, fn, 30, `zero`, `fn(30, false)`, false)
		testNamedKey(t, fn, 40, `zero`, `fn(40, false)`, false)
		testNamedKey(t, fn, 50, `zero`, `fn(50, false)`, false)
		testNamedKey(t, fn, 60, `zero`, `fn(60, false)`, false)
		testNamedKey(t, fn, 100, `zero`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `zero`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `zero`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `zero`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `zero`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `zero`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "10.0", `zero`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "11.0", `zero`, `fn("11.0", false)`, false)
		testNamedKey(t, fn, "12.0", `zero`, `fn("12.0", false)`, false)
		testNamedKey(t, fn, "13.0", `zero`, `fn("13.0", false)`, false)
		testNamedKey(t, fn, "14.0", `zero`, `fn("14.0", false)`, false)
		testNamedKey(t, fn, "15.0", `zero`, `fn("15.0", false)`, false)
		testNamedKey(t, fn, "16.0", `zero`, `fn("16.0", false)`, false)
		testNamedKey(t, fn, "100.0", `zero`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `zero`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `zero`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `zero`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `zero`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 9, `other`, `fn(9, false)`, false)
		testNamedKey(t, fn, 22, `other`, `fn(22, false)`, false)
		testNamedKey(t, fn, 29, `other`, `fn(29, false)`, false)
		testNamedKey(t, fn, 102, `other`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `other`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "0.2", `other`, `fn("0.2", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.2", `other`, `fn("1.2", false)`, false)
		testNamedKey(t, fn, "1.9", `other`, `fn("1.9", false)`, false)
		testNamedKey(t, fn, "10.2", `other`, `fn("10.2", false)`, false)
		testNamedKey(t, fn, "100.2", `other`, `fn("100.2", false)`, false)
		testNamedKey(t, fn, "1000.2", `other`, `fn("1000.2", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_mas(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("mas"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_mg(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("mg"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "0.000", `one`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `one`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_mgo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("mgo"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_mk(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("mk"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.1", `one`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.1", `one`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "3.1", `one`, `fn("3.1", false)`, false)
		testNamedKey(t, fn, "4.1", `one`, `fn("4.1", false)`, false)
		testNamedKey(t, fn, "5.1", `one`, `fn("5.1", false)`, false)
		testNamedKey(t, fn, "6.1", `one`, `fn("6.1", false)`, false)
		testNamedKey(t, fn, "7.1", `one`, `fn("7.1", false)`, false)
		testNamedKey(t, fn, "10.1", `one`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `one`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `one`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.2", `other`, `fn("0.2", false)`, false)
		testNamedKey(t, fn, "1.0", `other`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.2", `other`, `fn("1.2", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 21, `one`, `fn(21, true)`, true)
		testNamedKey(t, fn, 31, `one`, `fn(31, true)`, true)
		testNamedKey(t, fn, 41, `one`, `fn(41, true)`, true)
		testNamedKey(t, fn, 51, `one`, `fn(51, true)`, true)
		testNamedKey(t, fn, 61, `one`, `fn(61, true)`, true)
		testNamedKey(t, fn, 71, `one`, `fn(71, true)`, true)
		testNamedKey(t, fn, 81, `one`, `fn(81, true)`, true)
		testNamedKey(t, fn, 101, `one`, `fn(101, true)`, true)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, true)`, true)
		testNamedKey(t, fn, 2, `two`, `fn(2, true)`, true)
		testNamedKey(t, fn, 22, `two`, `fn(22, true)`, true)
		testNamedKey(t, fn, 32, `two`, `fn(32, true)`, true)
		testNamedKey(t, fn, 42, `two`, `fn(42, true)`, true)
		testNamedKey(t, fn, 52, `two`, `fn(52, true)`, true)
		testNamedKey(t, fn, 62, `two`, `fn(62, true)`, true)
		testNamedKey(t, fn, 72, `two`, `fn(72, true)`, true)
		testNamedKey(t, fn, 82, `two`, `fn(82, true)`, true)
		testNamedKey(t, fn, 102, `two`, `fn(102, true)`, true)
		testNamedKey(t, fn, 1002, `two`, `fn(1002, true)`, true)
		testNamedKey(t, fn, 7, `many`, `fn(7, true)`, true)
		testNamedKey(t, fn, 8, `many`, `fn(8, true)`, true)
		testNamedKey(t, fn, 27, `many`, `fn(27, true)`, true)
		testNamedKey(t, fn, 28, `many`, `fn(28, true)`, true)
		testNamedKey(t, fn, 37, `many`, `fn(37, true)`, true)
		testNamedKey(t, fn, 38, `many`, `fn(38, true)`, true)
		testNamedKey(t, fn, 47, `many`, `fn(47, true)`, true)
		testNamedKey(t, fn, 48, `many`, `fn(48, true)`, true)
		testNamedKey(t, fn, 57, `many`, `fn(57, true)`, true)
		testNamedKey(t, fn, 58, `many`, `fn(58, true)`, true)
		testNamedKey(t, fn, 67, `many`, `fn(67, true)`, true)
		testNamedKey(t, fn, 68, `many`, `fn(68, true)`, true)
		testNamedKey(t, fn, 77, `many`, `fn(77, true)`, true)
		testNamedKey(t, fn, 78, `many`, `fn(78, true)`, true)
		testNamedKey(t, fn, 87, `many`, `fn(87, true)`, true)
		testNamedKey(t, fn, 88, `many`, `fn(88, true)`, true)
		testNamedKey(t, fn, 107, `many`, `fn(107, true)`, true)
		testNamedKey(t, fn, 1007, `many`, `fn(1007, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 3, `other`, `fn(3, true)`, true)
		testNamedKey(t, fn, 6, `other`, `fn(6, true)`, true)
		testNamedKey(t, fn, 9, `other`, `fn(9, true)`, true)
		testNamedKey(t, fn, 19, `other`, `fn(19, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ml(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ml"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_mn(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("mn"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_roMD(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ro-MD"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `few`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `few`, `fn(16, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "0.0", `few`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `few`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `few`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `few`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `few`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `few`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `few`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `few`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 20, `other`, `fn(20, false)`, false)
		testNamedKey(t, fn, 35, `other`, `fn(35, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 16, `other`, `fn(16, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_mr(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("mr"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 2, `two`, `fn(2, true)`, true)
		testNamedKey(t, fn, 3, `two`, `fn(3, true)`, true)
		testNamedKey(t, fn, 4, `few`, `fn(4, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 5, `other`, `fn(5, true)`, true)
		testNamedKey(t, fn, 19, `other`, `fn(19, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ms(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ms"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 16, `other`, `fn(16, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_mt(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("mt"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `few`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 10, `few`, `fn(10, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 107, `few`, `fn(107, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "0.0", `few`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "2.0", `few`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.0", `few`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "4.0", `few`, `fn("4.0", false)`, false)
		testNamedKey(t, fn, "5.0", `few`, `fn("5.0", false)`, false)
		testNamedKey(t, fn, "6.0", `few`, `fn("6.0", false)`, false)
		testNamedKey(t, fn, "7.0", `few`, `fn("7.0", false)`, false)
		testNamedKey(t, fn, "8.0", `few`, `fn("8.0", false)`, false)
		testNamedKey(t, fn, "10.0", `few`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "102.0", `few`, `fn("102.0", false)`, false)
		testNamedKey(t, fn, "1002.0", `few`, `fn("1002.0", false)`, false)
		testNamedKey(t, fn, 11, `many`, `fn(11, false)`, false)
		testNamedKey(t, fn, 19, `many`, `fn(19, false)`, false)
		testNamedKey(t, fn, 111, `many`, `fn(111, false)`, false)
		testNamedKey(t, fn, 117, `many`, `fn(117, false)`, false)
		testNamedKey(t, fn, 1011, `many`, `fn(1011, false)`, false)
		testNamedKey(t, fn, "11.0", `many`, `fn("11.0", false)`, false)
		testNamedKey(t, fn, "12.0", `many`, `fn("12.0", false)`, false)
		testNamedKey(t, fn, "13.0", `many`, `fn("13.0", false)`, false)
		testNamedKey(t, fn, "14.0", `many`, `fn("14.0", false)`, false)
		testNamedKey(t, fn, "15.0", `many`, `fn("15.0", false)`, false)
		testNamedKey(t, fn, "16.0", `many`, `fn("16.0", false)`, false)
		testNamedKey(t, fn, "17.0", `many`, `fn("17.0", false)`, false)
		testNamedKey(t, fn, "18.0", `many`, `fn("18.0", false)`, false)
		testNamedKey(t, fn, "111.0", `many`, `fn("111.0", false)`, false)
		testNamedKey(t, fn, "1011.0", `many`, `fn("1011.0", false)`, false)
		testNamedKey(t, fn, 20, `other`, `fn(20, false)`, false)
		testNamedKey(t, fn, 35, `other`, `fn(35, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.1", `other`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_my(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("my"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_nah(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("nah"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_naq(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("naq"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 3, `other`, `fn(3, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_nb(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("nb"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_nd(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("nd"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ne(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ne"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 4, `one`, `fn(4, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 5, `other`, `fn(5, true)`, true)
		testNamedKey(t, fn, 19, `other`, `fn(19, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_nl(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("nl"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_nn(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("nn"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_nnh(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("nnh"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_no(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("no"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_nqo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("nqo"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_nr(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("nr"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_nso(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("nso"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "0.000", `one`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `one`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ny(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ny"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_nyn(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("nyn"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_om(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("om"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_or(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("or"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 5, `one`, `fn(5, true)`, true)
		testNamedKey(t, fn, 7, `one`, `fn(7, true)`, true)
		testNamedKey(t, fn, 9, `one`, `fn(9, true)`, true)
		testNamedKey(t, fn, 2, `two`, `fn(2, true)`, true)
		testNamedKey(t, fn, 3, `two`, `fn(3, true)`, true)
		testNamedKey(t, fn, 4, `few`, `fn(4, true)`, true)
		testNamedKey(t, fn, 6, `many`, `fn(6, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 10, `other`, `fn(10, true)`, true)
		testNamedKey(t, fn, 24, `other`, `fn(24, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_os(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("os"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_osa(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("osa"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_pa(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("pa"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "0.000", `one`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `one`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_pap(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("pap"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_pl(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("pl"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 22, `few`, `fn(22, false)`, false)
		testNamedKey(t, fn, 24, `few`, `fn(24, false)`, false)
		testNamedKey(t, fn, 32, `few`, `fn(32, false)`, false)
		testNamedKey(t, fn, 34, `few`, `fn(34, false)`, false)
		testNamedKey(t, fn, 42, `few`, `fn(42, false)`, false)
		testNamedKey(t, fn, 44, `few`, `fn(44, false)`, false)
		testNamedKey(t, fn, 52, `few`, `fn(52, false)`, false)
		testNamedKey(t, fn, 54, `few`, `fn(54, false)`, false)
		testNamedKey(t, fn, 62, `few`, `fn(62, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, 0, `many`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `many`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `many`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `many`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `many`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `many`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `many`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `many`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_prg(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("prg"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.1", `one`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.1", `one`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "3.1", `one`, `fn("3.1", false)`, false)
		testNamedKey(t, fn, "4.1", `one`, `fn("4.1", false)`, false)
		testNamedKey(t, fn, "5.1", `one`, `fn("5.1", false)`, false)
		testNamedKey(t, fn, "6.1", `one`, `fn("6.1", false)`, false)
		testNamedKey(t, fn, "7.1", `one`, `fn("7.1", false)`, false)
		testNamedKey(t, fn, "10.1", `one`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `one`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `one`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 0, `zero`, `fn(0, false)`, false)
		testNamedKey(t, fn, 10, `zero`, `fn(10, false)`, false)
		testNamedKey(t, fn, 20, `zero`, `fn(20, false)`, false)
		testNamedKey(t, fn, 30, `zero`, `fn(30, false)`, false)
		testNamedKey(t, fn, 40, `zero`, `fn(40, false)`, false)
		testNamedKey(t, fn, 50, `zero`, `fn(50, false)`, false)
		testNamedKey(t, fn, 60, `zero`, `fn(60, false)`, false)
		testNamedKey(t, fn, 100, `zero`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `zero`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `zero`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `zero`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `zero`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `zero`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "10.0", `zero`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "11.0", `zero`, `fn("11.0", false)`, false)
		testNamedKey(t, fn, "12.0", `zero`, `fn("12.0", false)`, false)
		testNamedKey(t, fn, "13.0", `zero`, `fn("13.0", false)`, false)
		testNamedKey(t, fn, "14.0", `zero`, `fn("14.0", false)`, false)
		testNamedKey(t, fn, "15.0", `zero`, `fn("15.0", false)`, false)
		testNamedKey(t, fn, "16.0", `zero`, `fn("16.0", false)`, false)
		testNamedKey(t, fn, "100.0", `zero`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `zero`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `zero`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `zero`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `zero`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 9, `other`, `fn(9, false)`, false)
		testNamedKey(t, fn, 22, `other`, `fn(22, false)`, false)
		testNamedKey(t, fn, 29, `other`, `fn(29, false)`, false)
		testNamedKey(t, fn, 102, `other`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `other`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "0.2", `other`, `fn("0.2", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.2", `other`, `fn("1.2", false)`, false)
		testNamedKey(t, fn, "1.9", `other`, `fn("1.9", false)`, false)
		testNamedKey(t, fn, "10.2", `other`, `fn("10.2", false)`, false)
		testNamedKey(t, fn, "100.2", `other`, `fn("100.2", false)`, false)
		testNamedKey(t, fn, "1000.2", `other`, `fn("1000.2", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ps(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ps"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_pt(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("pt"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `one`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.5", `other`, `fn("3.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ptPT(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("pt-PT"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_rm(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("rm"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ro(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ro"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `few`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `few`, `fn(16, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "0.0", `few`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `few`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `few`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `few`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `few`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `few`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `few`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `few`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 20, `other`, `fn(20, false)`, false)
		testNamedKey(t, fn, 35, `other`, `fn(35, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 16, `other`, `fn(16, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_rof(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("rof"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_und(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("und"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ru(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ru"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 22, `few`, `fn(22, false)`, false)
		testNamedKey(t, fn, 24, `few`, `fn(24, false)`, false)
		testNamedKey(t, fn, 32, `few`, `fn(32, false)`, false)
		testNamedKey(t, fn, 34, `few`, `fn(34, false)`, false)
		testNamedKey(t, fn, 42, `few`, `fn(42, false)`, false)
		testNamedKey(t, fn, 44, `few`, `fn(44, false)`, false)
		testNamedKey(t, fn, 52, `few`, `fn(52, false)`, false)
		testNamedKey(t, fn, 54, `few`, `fn(54, false)`, false)
		testNamedKey(t, fn, 62, `few`, `fn(62, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, 0, `many`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `many`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `many`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `many`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `many`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `many`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `many`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `many`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_rwk(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("rwk"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_sah(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sah"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_saq(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("saq"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_sc(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sc"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 8, `many`, `fn(8, true)`, true)
		testNamedKey(t, fn, 11, `many`, `fn(11, true)`, true)
		testNamedKey(t, fn, 80, `many`, `fn(80, true)`, true)
		testNamedKey(t, fn, 800, `many`, `fn(800, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 7, `other`, `fn(7, true)`, true)
		testNamedKey(t, fn, 9, `other`, `fn(9, true)`, true)
		testNamedKey(t, fn, 10, `other`, `fn(10, true)`, true)
		testNamedKey(t, fn, 12, `other`, `fn(12, true)`, true)
		testNamedKey(t, fn, 17, `other`, `fn(17, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_scn(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("scn"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 8, `many`, `fn(8, true)`, true)
		testNamedKey(t, fn, 11, `many`, `fn(11, true)`, true)
		testNamedKey(t, fn, 80, `many`, `fn(80, true)`, true)
		testNamedKey(t, fn, 800, `many`, `fn(800, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 7, `other`, `fn(7, true)`, true)
		testNamedKey(t, fn, 9, `other`, `fn(9, true)`, true)
		testNamedKey(t, fn, 10, `other`, `fn(10, true)`, true)
		testNamedKey(t, fn, 12, `other`, `fn(12, true)`, true)
		testNamedKey(t, fn, 17, `other`, `fn(17, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_sd(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sd"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_sdh(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sdh"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_se(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("se"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 3, `other`, `fn(3, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_seh(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("seh"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ses(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ses"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_sg(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sg"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_srLatn(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sr-Latn"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.1", `one`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.1", `one`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "3.1", `one`, `fn("3.1", false)`, false)
		testNamedKey(t, fn, "4.1", `one`, `fn("4.1", false)`, false)
		testNamedKey(t, fn, "5.1", `one`, `fn("5.1", false)`, false)
		testNamedKey(t, fn, "6.1", `one`, `fn("6.1", false)`, false)
		testNamedKey(t, fn, "7.1", `one`, `fn("7.1", false)`, false)
		testNamedKey(t, fn, "10.1", `one`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `one`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `one`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 22, `few`, `fn(22, false)`, false)
		testNamedKey(t, fn, 24, `few`, `fn(24, false)`, false)
		testNamedKey(t, fn, 32, `few`, `fn(32, false)`, false)
		testNamedKey(t, fn, 34, `few`, `fn(34, false)`, false)
		testNamedKey(t, fn, 42, `few`, `fn(42, false)`, false)
		testNamedKey(t, fn, 44, `few`, `fn(44, false)`, false)
		testNamedKey(t, fn, 52, `few`, `fn(52, false)`, false)
		testNamedKey(t, fn, 54, `few`, `fn(54, false)`, false)
		testNamedKey(t, fn, 62, `few`, `fn(62, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "0.2", `few`, `fn("0.2", false)`, false)
		testNamedKey(t, fn, "0.4", `few`, `fn("0.4", false)`, false)
		testNamedKey(t, fn, "1.2", `few`, `fn("1.2", false)`, false)
		testNamedKey(t, fn, "1.4", `few`, `fn("1.4", false)`, false)
		testNamedKey(t, fn, "2.2", `few`, `fn("2.2", false)`, false)
		testNamedKey(t, fn, "2.4", `few`, `fn("2.4", false)`, false)
		testNamedKey(t, fn, "3.2", `few`, `fn("3.2", false)`, false)
		testNamedKey(t, fn, "3.4", `few`, `fn("3.4", false)`, false)
		testNamedKey(t, fn, "4.2", `few`, `fn("4.2", false)`, false)
		testNamedKey(t, fn, "4.4", `few`, `fn("4.4", false)`, false)
		testNamedKey(t, fn, "5.2", `few`, `fn("5.2", false)`, false)
		testNamedKey(t, fn, "10.2", `few`, `fn("10.2", false)`, false)
		testNamedKey(t, fn, "100.2", `few`, `fn("100.2", false)`, false)
		testNamedKey(t, fn, "1000.2", `few`, `fn("1000.2", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `other`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.5", `other`, `fn("0.5", false)`, false)
		testNamedKey(t, fn, "1.0", `other`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.5", `other`, `fn("2.5", false)`, false)
		testNamedKey(t, fn, "2.7", `other`, `fn("2.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_shi(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("shi"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.04", `one`, `fn("0.04", false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 10, `few`, `fn(10, false)`, false)
		testNamedKey(t, fn, "2.0", `few`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "3.0", `few`, `fn("3.0", false)`, false)
		testNamedKey(t, fn, "4.0", `few`, `fn("4.0", false)`, false)
		testNamedKey(t, fn, "5.0", `few`, `fn("5.0", false)`, false)
		testNamedKey(t, fn, "6.0", `few`, `fn("6.0", false)`, false)
		testNamedKey(t, fn, "7.0", `few`, `fn("7.0", false)`, false)
		testNamedKey(t, fn, "8.0", `few`, `fn("8.0", false)`, false)
		testNamedKey(t, fn, "9.0", `few`, `fn("9.0", false)`, false)
		testNamedKey(t, fn, "10.0", `few`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "2.00", `few`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "3.00", `few`, `fn("3.00", false)`, false)
		testNamedKey(t, fn, "4.00", `few`, `fn("4.00", false)`, false)
		testNamedKey(t, fn, "5.00", `few`, `fn("5.00", false)`, false)
		testNamedKey(t, fn, "6.00", `few`, `fn("6.00", false)`, false)
		testNamedKey(t, fn, "7.00", `few`, `fn("7.00", false)`, false)
		testNamedKey(t, fn, "8.00", `few`, `fn("8.00", false)`, false)
		testNamedKey(t, fn, 11, `other`, `fn(11, false)`, false)
		testNamedKey(t, fn, 26, `other`, `fn(26, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.9", `other`, `fn("1.9", false)`, false)
		testNamedKey(t, fn, "2.1", `other`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "2.7", `other`, `fn("2.7", false)`, false)
		testNamedKey(t, fn, "10.1", `other`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_si(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("si"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.01", `one`, `fn("0.01", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "0.000", `one`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "0.001", `one`, `fn("0.001", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `one`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, "0.0001", `one`, `fn("0.0001", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.2", `other`, `fn("0.2", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.8", `other`, `fn("1.8", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_sk(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sk"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, "0.0", `many`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `many`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `many`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `many`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `many`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `many`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `many`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `many`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `other`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_sl(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sl"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 201, `one`, `fn(201, false)`, false)
		testNamedKey(t, fn, 301, `one`, `fn(301, false)`, false)
		testNamedKey(t, fn, 401, `one`, `fn(401, false)`, false)
		testNamedKey(t, fn, 501, `one`, `fn(501, false)`, false)
		testNamedKey(t, fn, 601, `one`, `fn(601, false)`, false)
		testNamedKey(t, fn, 701, `one`, `fn(701, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, 102, `two`, `fn(102, false)`, false)
		testNamedKey(t, fn, 202, `two`, `fn(202, false)`, false)
		testNamedKey(t, fn, 302, `two`, `fn(302, false)`, false)
		testNamedKey(t, fn, 402, `two`, `fn(402, false)`, false)
		testNamedKey(t, fn, 502, `two`, `fn(502, false)`, false)
		testNamedKey(t, fn, 602, `two`, `fn(602, false)`, false)
		testNamedKey(t, fn, 702, `two`, `fn(702, false)`, false)
		testNamedKey(t, fn, 1002, `two`, `fn(1002, false)`, false)
		testNamedKey(t, fn, 3, `few`, `fn(3, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 103, `few`, `fn(103, false)`, false)
		testNamedKey(t, fn, 104, `few`, `fn(104, false)`, false)
		testNamedKey(t, fn, 203, `few`, `fn(203, false)`, false)
		testNamedKey(t, fn, 204, `few`, `fn(204, false)`, false)
		testNamedKey(t, fn, 303, `few`, `fn(303, false)`, false)
		testNamedKey(t, fn, 304, `few`, `fn(304, false)`, false)
		testNamedKey(t, fn, 403, `few`, `fn(403, false)`, false)
		testNamedKey(t, fn, 404, `few`, `fn(404, false)`, false)
		testNamedKey(t, fn, 503, `few`, `fn(503, false)`, false)
		testNamedKey(t, fn, 504, `few`, `fn(504, false)`, false)
		testNamedKey(t, fn, 603, `few`, `fn(603, false)`, false)
		testNamedKey(t, fn, 604, `few`, `fn(604, false)`, false)
		testNamedKey(t, fn, 703, `few`, `fn(703, false)`, false)
		testNamedKey(t, fn, 704, `few`, `fn(704, false)`, false)
		testNamedKey(t, fn, 1003, `few`, `fn(1003, false)`, false)
		testNamedKey(t, fn, "0.0", `few`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `few`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `few`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `few`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `few`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `few`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `few`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `few`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `other`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_sma(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sma"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 3, `other`, `fn(3, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_smi(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("smi"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 3, `other`, `fn(3, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_smj(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("smj"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 3, `other`, `fn(3, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_smn(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("smn"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 3, `other`, `fn(3, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_sms(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sms"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `two`, `fn(2, false)`, false)
		testNamedKey(t, fn, "2.0", `two`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.00", `two`, `fn("2.00", false)`, false)
		testNamedKey(t, fn, "2.000", `two`, `fn("2.000", false)`, false)
		testNamedKey(t, fn, "2.0000", `two`, `fn("2.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 3, `other`, `fn(3, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_sn(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sn"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_so(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("so"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_sq(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sq"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 4, `many`, `fn(4, true)`, true)
		testNamedKey(t, fn, 24, `many`, `fn(24, true)`, true)
		testNamedKey(t, fn, 34, `many`, `fn(34, true)`, true)
		testNamedKey(t, fn, 44, `many`, `fn(44, true)`, true)
		testNamedKey(t, fn, 54, `many`, `fn(54, true)`, true)
		testNamedKey(t, fn, 64, `many`, `fn(64, true)`, true)
		testNamedKey(t, fn, 74, `many`, `fn(74, true)`, true)
		testNamedKey(t, fn, 84, `many`, `fn(84, true)`, true)
		testNamedKey(t, fn, 104, `many`, `fn(104, true)`, true)
		testNamedKey(t, fn, 1004, `many`, `fn(1004, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 3, `other`, `fn(3, true)`, true)
		testNamedKey(t, fn, 5, `other`, `fn(5, true)`, true)
		testNamedKey(t, fn, 17, `other`, `fn(17, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_sr(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sr"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, "0.1", `one`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "1.1", `one`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.1", `one`, `fn("2.1", false)`, false)
		testNamedKey(t, fn, "3.1", `one`, `fn("3.1", false)`, false)
		testNamedKey(t, fn, "4.1", `one`, `fn("4.1", false)`, false)
		testNamedKey(t, fn, "5.1", `one`, `fn("5.1", false)`, false)
		testNamedKey(t, fn, "6.1", `one`, `fn("6.1", false)`, false)
		testNamedKey(t, fn, "7.1", `one`, `fn("7.1", false)`, false)
		testNamedKey(t, fn, "10.1", `one`, `fn("10.1", false)`, false)
		testNamedKey(t, fn, "100.1", `one`, `fn("100.1", false)`, false)
		testNamedKey(t, fn, "1000.1", `one`, `fn("1000.1", false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 22, `few`, `fn(22, false)`, false)
		testNamedKey(t, fn, 24, `few`, `fn(24, false)`, false)
		testNamedKey(t, fn, 32, `few`, `fn(32, false)`, false)
		testNamedKey(t, fn, 34, `few`, `fn(34, false)`, false)
		testNamedKey(t, fn, 42, `few`, `fn(42, false)`, false)
		testNamedKey(t, fn, 44, `few`, `fn(44, false)`, false)
		testNamedKey(t, fn, 52, `few`, `fn(52, false)`, false)
		testNamedKey(t, fn, 54, `few`, `fn(54, false)`, false)
		testNamedKey(t, fn, 62, `few`, `fn(62, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, "0.2", `few`, `fn("0.2", false)`, false)
		testNamedKey(t, fn, "0.4", `few`, `fn("0.4", false)`, false)
		testNamedKey(t, fn, "1.2", `few`, `fn("1.2", false)`, false)
		testNamedKey(t, fn, "1.4", `few`, `fn("1.4", false)`, false)
		testNamedKey(t, fn, "2.2", `few`, `fn("2.2", false)`, false)
		testNamedKey(t, fn, "2.4", `few`, `fn("2.4", false)`, false)
		testNamedKey(t, fn, "3.2", `few`, `fn("3.2", false)`, false)
		testNamedKey(t, fn, "3.4", `few`, `fn("3.4", false)`, false)
		testNamedKey(t, fn, "4.2", `few`, `fn("4.2", false)`, false)
		testNamedKey(t, fn, "4.4", `few`, `fn("4.4", false)`, false)
		testNamedKey(t, fn, "5.2", `few`, `fn("5.2", false)`, false)
		testNamedKey(t, fn, "10.2", `few`, `fn("10.2", false)`, false)
		testNamedKey(t, fn, "100.2", `few`, `fn("100.2", false)`, false)
		testNamedKey(t, fn, "1000.2", `few`, `fn("1000.2", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `other`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `other`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.5", `other`, `fn("0.5", false)`, false)
		testNamedKey(t, fn, "1.0", `other`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "2.0", `other`, `fn("2.0", false)`, false)
		testNamedKey(t, fn, "2.5", `other`, `fn("2.5", false)`, false)
		testNamedKey(t, fn, "2.7", `other`, `fn("2.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ss(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ss"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ssy(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ssy"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_st(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("st"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_su(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("su"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_sv(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sv"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 2, `one`, `fn(2, true)`, true)
		testNamedKey(t, fn, 21, `one`, `fn(21, true)`, true)
		testNamedKey(t, fn, 22, `one`, `fn(22, true)`, true)
		testNamedKey(t, fn, 31, `one`, `fn(31, true)`, true)
		testNamedKey(t, fn, 32, `one`, `fn(32, true)`, true)
		testNamedKey(t, fn, 41, `one`, `fn(41, true)`, true)
		testNamedKey(t, fn, 42, `one`, `fn(42, true)`, true)
		testNamedKey(t, fn, 51, `one`, `fn(51, true)`, true)
		testNamedKey(t, fn, 52, `one`, `fn(52, true)`, true)
		testNamedKey(t, fn, 61, `one`, `fn(61, true)`, true)
		testNamedKey(t, fn, 62, `one`, `fn(62, true)`, true)
		testNamedKey(t, fn, 71, `one`, `fn(71, true)`, true)
		testNamedKey(t, fn, 72, `one`, `fn(72, true)`, true)
		testNamedKey(t, fn, 81, `one`, `fn(81, true)`, true)
		testNamedKey(t, fn, 82, `one`, `fn(82, true)`, true)
		testNamedKey(t, fn, 101, `one`, `fn(101, true)`, true)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 3, `other`, `fn(3, true)`, true)
		testNamedKey(t, fn, 17, `other`, `fn(17, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_sw(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("sw"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_syr(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("syr"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ta(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ta"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_te(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("te"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_teo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("teo"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_th(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("th"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ti(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ti"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "0.000", `one`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `one`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_tig(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("tig"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_tk(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("tk"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 6, `few`, `fn(6, true)`, true)
		testNamedKey(t, fn, 9, `few`, `fn(9, true)`, true)
		testNamedKey(t, fn, 10, `few`, `fn(10, true)`, true)
		testNamedKey(t, fn, 16, `few`, `fn(16, true)`, true)
		testNamedKey(t, fn, 19, `few`, `fn(19, true)`, true)
		testNamedKey(t, fn, 26, `few`, `fn(26, true)`, true)
		testNamedKey(t, fn, 29, `few`, `fn(29, true)`, true)
		testNamedKey(t, fn, 36, `few`, `fn(36, true)`, true)
		testNamedKey(t, fn, 39, `few`, `fn(39, true)`, true)
		testNamedKey(t, fn, 106, `few`, `fn(106, true)`, true)
		testNamedKey(t, fn, 1006, `few`, `fn(1006, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 5, `other`, `fn(5, true)`, true)
		testNamedKey(t, fn, 7, `other`, `fn(7, true)`, true)
		testNamedKey(t, fn, 8, `other`, `fn(8, true)`, true)
		testNamedKey(t, fn, 11, `other`, `fn(11, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 17, `other`, `fn(17, true)`, true)
		testNamedKey(t, fn, 18, `other`, `fn(18, true)`, true)
		testNamedKey(t, fn, 20, `other`, `fn(20, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_tn(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("tn"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_to(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("to"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_tr(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("tr"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ts(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ts"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_tzm(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("tzm"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 11, `one`, `fn(11, false)`, false)
		testNamedKey(t, fn, 24, `one`, `fn(24, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "11.0", `one`, `fn("11.0", false)`, false)
		testNamedKey(t, fn, "12.0", `one`, `fn("12.0", false)`, false)
		testNamedKey(t, fn, "13.0", `one`, `fn("13.0", false)`, false)
		testNamedKey(t, fn, "14.0", `one`, `fn("14.0", false)`, false)
		testNamedKey(t, fn, "15.0", `one`, `fn("15.0", false)`, false)
		testNamedKey(t, fn, "16.0", `one`, `fn("16.0", false)`, false)
		testNamedKey(t, fn, "17.0", `one`, `fn("17.0", false)`, false)
		testNamedKey(t, fn, "18.0", `one`, `fn("18.0", false)`, false)
		testNamedKey(t, fn, "19.0", `one`, `fn("19.0", false)`, false)
		testNamedKey(t, fn, "20.0", `one`, `fn("20.0", false)`, false)
		testNamedKey(t, fn, "21.0", `one`, `fn("21.0", false)`, false)
		testNamedKey(t, fn, "22.0", `one`, `fn("22.0", false)`, false)
		testNamedKey(t, fn, "23.0", `one`, `fn("23.0", false)`, false)
		testNamedKey(t, fn, "24.0", `one`, `fn("24.0", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 10, `other`, `fn(10, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 106, `other`, `fn(106, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_ug(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ug"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_uk(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("uk"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 21, `one`, `fn(21, false)`, false)
		testNamedKey(t, fn, 31, `one`, `fn(31, false)`, false)
		testNamedKey(t, fn, 41, `one`, `fn(41, false)`, false)
		testNamedKey(t, fn, 51, `one`, `fn(51, false)`, false)
		testNamedKey(t, fn, 61, `one`, `fn(61, false)`, false)
		testNamedKey(t, fn, 71, `one`, `fn(71, false)`, false)
		testNamedKey(t, fn, 81, `one`, `fn(81, false)`, false)
		testNamedKey(t, fn, 101, `one`, `fn(101, false)`, false)
		testNamedKey(t, fn, 1001, `one`, `fn(1001, false)`, false)
		testNamedKey(t, fn, 2, `few`, `fn(2, false)`, false)
		testNamedKey(t, fn, 4, `few`, `fn(4, false)`, false)
		testNamedKey(t, fn, 22, `few`, `fn(22, false)`, false)
		testNamedKey(t, fn, 24, `few`, `fn(24, false)`, false)
		testNamedKey(t, fn, 32, `few`, `fn(32, false)`, false)
		testNamedKey(t, fn, 34, `few`, `fn(34, false)`, false)
		testNamedKey(t, fn, 42, `few`, `fn(42, false)`, false)
		testNamedKey(t, fn, 44, `few`, `fn(44, false)`, false)
		testNamedKey(t, fn, 52, `few`, `fn(52, false)`, false)
		testNamedKey(t, fn, 54, `few`, `fn(54, false)`, false)
		testNamedKey(t, fn, 62, `few`, `fn(62, false)`, false)
		testNamedKey(t, fn, 102, `few`, `fn(102, false)`, false)
		testNamedKey(t, fn, 1002, `few`, `fn(1002, false)`, false)
		testNamedKey(t, fn, 0, `many`, `fn(0, false)`, false)
		testNamedKey(t, fn, 5, `many`, `fn(5, false)`, false)
		testNamedKey(t, fn, 19, `many`, `fn(19, false)`, false)
		testNamedKey(t, fn, 100, `many`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `many`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `many`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `many`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `many`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 3, `few`, `fn(3, true)`, true)
		testNamedKey(t, fn, 23, `few`, `fn(23, true)`, true)
		testNamedKey(t, fn, 33, `few`, `fn(33, true)`, true)
		testNamedKey(t, fn, 43, `few`, `fn(43, true)`, true)
		testNamedKey(t, fn, 53, `few`, `fn(53, true)`, true)
		testNamedKey(t, fn, 63, `few`, `fn(63, true)`, true)
		testNamedKey(t, fn, 73, `few`, `fn(73, true)`, true)
		testNamedKey(t, fn, 83, `few`, `fn(83, true)`, true)
		testNamedKey(t, fn, 103, `few`, `fn(103, true)`, true)
		testNamedKey(t, fn, 1003, `few`, `fn(1003, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 4, `other`, `fn(4, true)`, true)
		testNamedKey(t, fn, 16, `other`, `fn(16, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ur(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ur"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_uz(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("uz"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_ve(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("ve"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_vi(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("vi"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, true)`, true)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 2, `other`, `fn(2, true)`, true)
		testNamedKey(t, fn, 16, `other`, `fn(16, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_vo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("vo"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_vun(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("vun"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_wa(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("wa"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "0.000", `one`, `fn("0.000", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "0.0000", `one`, `fn("0.0000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.1", `other`, `fn("0.1", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.7", `other`, `fn("1.7", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_wae(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("wae"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_wo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("wo"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_xh(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("xh"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_xog(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("xog"))
	if nil != fn {
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "1.00", `one`, `fn("1.00", false)`, false)
		testNamedKey(t, fn, "1.000", `one`, `fn("1.000", false)`, false)
		testNamedKey(t, fn, "1.0000", `one`, `fn("1.0000", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 16, `other`, `fn(16, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "0.9", `other`, `fn("0.9", false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "1.6", `other`, `fn("1.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_yo(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("yo"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
	}
}

func TestPluralFunc_yue(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("yue"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_zh(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("zh"))
	if nil != fn {
		testNamedKey(t, fn, 0, `other`, `fn(0, false)`, false)
		testNamedKey(t, fn, 15, `other`, `fn(15, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "0.0", `other`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.5", `other`, `fn("1.5", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}

func TestPluralFunc_zu(t *testing.T) {
	fn := getPluralFunc(t, language.MustParse("zu"))
	if nil != fn {
		testNamedKey(t, fn, 0, `one`, `fn(0, false)`, false)
		testNamedKey(t, fn, 1, `one`, `fn(1, false)`, false)
		testNamedKey(t, fn, "0.0", `one`, `fn("0.0", false)`, false)
		testNamedKey(t, fn, "1.0", `one`, `fn("1.0", false)`, false)
		testNamedKey(t, fn, "0.00", `one`, `fn("0.00", false)`, false)
		testNamedKey(t, fn, "0.04", `one`, `fn("0.04", false)`, false)
		testNamedKey(t, fn, 2, `other`, `fn(2, false)`, false)
		testNamedKey(t, fn, 17, `other`, `fn(17, false)`, false)
		testNamedKey(t, fn, 100, `other`, `fn(100, false)`, false)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, false)`, false)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, false)`, false)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, false)`, false)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, false)`, false)
		testNamedKey(t, fn, "1.1", `other`, `fn("1.1", false)`, false)
		testNamedKey(t, fn, "2.6", `other`, `fn("2.6", false)`, false)
		testNamedKey(t, fn, "10.0", `other`, `fn("10.0", false)`, false)
		testNamedKey(t, fn, "100.0", `other`, `fn("100.0", false)`, false)
		testNamedKey(t, fn, "1000.0", `other`, `fn("1000.0", false)`, false)
		testNamedKey(t, fn, "10000.0", `other`, `fn("10000.0", false)`, false)
		testNamedKey(t, fn, "100000.0", `other`, `fn("100000.0", false)`, false)
		testNamedKey(t, fn, "1000000.0", `other`, `fn("1000000.0", false)`, false)
		testNamedKey(t, fn, 0, `other`, `fn(0, true)`, true)
		testNamedKey(t, fn, 15, `other`, `fn(15, true)`, true)
		testNamedKey(t, fn, 100, `other`, `fn(100, true)`, true)
		testNamedKey(t, fn, 1000, `other`, `fn(1000, true)`, true)
		testNamedKey(t, fn, 10000, `other`, `fn(10000, true)`, true)
		testNamedKey(t, fn, 100000, `other`, `fn(100000, true)`, true)
		testNamedKey(t, fn, 1000000, `other`, `fn(1000000, true)`, true)
	}
}
